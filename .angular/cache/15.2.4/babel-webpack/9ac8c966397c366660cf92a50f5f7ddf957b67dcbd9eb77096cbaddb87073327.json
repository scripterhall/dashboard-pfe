{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nvar SelectProjetComponent = /** @class */function () {\n  /*  end */\n  function SelectProjetComponent(projetService, formBuilder, formBuilder2, roleService, invitationService, membreService, router) {\n    this.projetService = projetService;\n    this.formBuilder = formBuilder;\n    this.formBuilder2 = formBuilder2;\n    this.roleService = roleService;\n    this.invitationService = invitationService;\n    this.membreService = membreService;\n    this.router = router;\n    this.permissionMap = new Map([[\"dev team\", \"droit de lecture et ecriture sur le sprint ansi que sprintBacklog et les ticket tâche \"], [\"po\", \"droit d'ecriture et lecture sur le product backlog et les ticket histoire\"], [\"scrum master\", \"droit de lecture sur les backlogs la possibiliter de lancer des meeting \"]]);\n    this.descriptionMap = new Map([[\"dev team\", \"vous êtes un des membre chargé\\n de realiser des increment potentiellement livrable chaque\\nsprint\"], [\"po\", \"vous êtes le professionnel responsable\\nde maximiser la valeur du produit\\nrésultant du travail de l'équipe \\nde développement ou, en d'autres\\n termes, de maximiser la valeur\\n pour le projet\"], [\"scrum master\", \"vous êtes chargé d'assurer que\\nScrum est compris et mis en œuvre. \"]]);\n    this.valid = false;\n    /* detail balise */\n    this.panelOpenState = false;\n    this.panelOpenState2 = false;\n    /** passer d un expansion a un autre */\n    this.step = 0;\n    /** liste des membre cocher pour les invité */\n    this.cochedMembre = [];\n    this.asyncTabs = new Observable(function (observer) {\n      /*   les type des action gerer par se composant :: les sliders   */\n      setTimeout(function () {\n        observer.next([{\n          label: 'Gerer',\n          content: 'Content 1'\n        }, {\n          label: 'nouveau',\n          content: 'Content 2'\n        }, {\n          label: 'Invitation',\n          content: 'Content 3'\n        }]);\n      }, 1000);\n    });\n  }\n  SelectProjetComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.invitationPkForm = this.formBuilder2.group({\n      id: null\n    });\n    this.rolePkForm = this.formBuilder2.group({\n      membreId: null,\n      projetId: [null, Validators.required]\n    });\n    this.invitationForm = this.formBuilder2.group({\n      chefProjetId: 1,\n      emailInvitee: [\"\", Validators.required],\n      membreId: null\n    });\n    this.roleForm = this.formBuilder2.group({\n      pk: this.rolePkForm,\n      type: [\"\", Validators.required],\n      permission: [\"\"],\n      description: [\"\"]\n    });\n    this.combinedForm = this.formBuilder2.group({\n      invitation: this.invitationForm,\n      role: this.roleForm\n    });\n    /*   initialisation de formulaire d'ajout de projet   */\n    this.projetForm = this.formBuilder.group({\n      nom: ['', Validators.required],\n      dateDebut: ['', Validators.required],\n      dateFin: ['', Validators.required],\n      cles: ['', Validators.required],\n      chefProjetId: 1\n    });\n    /*   liste des projet d'un chef de projet   */\n    this.projetService.getListProjetChefProjet(1).subscribe(function (data) {\n      _this.projets = data;\n    });\n    this.membreService.afficherTousMembres().subscribe(function (data) {\n      _this.membreList = data;\n    });\n    /**les eccouteurs de champ */\n    this.rolePkForm.get('membreId').valueChanges.subscribe(function (membreId) {\n      var membre = _this.membreList.find(function (membre) {\n        return membre.id == membreId;\n      });\n      _this.invitationForm.patchValue({\n        emailInvitee: membre.email || null\n      });\n      _this.invitationForm.patchValue({\n        membreId: membreId || null\n      });\n    });\n    this.roleForm.get('type').valueChanges.subscribe(function (typeNumber) {\n      _this.roleForm.patchValue({\n        permission: _this.permissionMap.get(typeNumber) || null\n      });\n    });\n    this.roleForm.get('type').valueChanges.subscribe(function (typeNumber) {\n      _this.roleForm.patchValue({\n        description: _this.descriptionMap.get(typeNumber) || null\n      });\n    });\n  };\n  /*   un seul projet peut etre gerer en temps real    */\n  SelectProjetComponent.prototype.cocherProjet = function (index) {\n    this.valid = !this.valid;\n    this.projets[index].checked = !this.projets[index].checked;\n  };\n  /*   boutton gerer de content 1  */\n  SelectProjetComponent.prototype.gerer = function (index) {\n    if (confirm(\"Vous etes sûr de gerer le projet \" + this.projets[index].nom + \" !!\")) {\n      localStorage.setItem('projets', JSON.stringify(this.projets[index]));\n      this.router.navigateByUrl('/dashboard');\n    }\n  };\n  /*   annuler* ou gerer  */\n  SelectProjetComponent.prototype.onCancel = function () {\n    this.projetForm.reset();\n  };\n  SelectProjetComponent.prototype.onSubmit = function () {\n    var _this = this;\n    console.log(this.projetForm.value);\n    this.projetService.ajouterProjetByChef(this.projetForm.value).subscribe(function (data) {\n      _this.projet = data;\n      localStorage.setItem('projet', JSON.stringify(_this.projet));\n    });\n  };\n  SelectProjetComponent.prototype.setStep = function (index) {\n    this.step = index;\n  };\n  SelectProjetComponent.prototype.nextStep = function () {\n    this.step++;\n  };\n  SelectProjetComponent.prototype.prevStep = function () {\n    this.step--;\n  };\n  SelectProjetComponent.prototype.allValid = function () {\n    return this.roleForm.valid && this.rolePkForm.valid && this.invitationForm.valid && this.invitationPkForm.valid;\n  };\n  SelectProjetComponent.prototype.inviter = function () {\n    var _this = this;\n    console.log(this.invitationForm.value);\n    console.log(this.combinedForm.get('invitation').value);\n    var projetChoisis = this.projets.find(function (projet) {\n      return projet.id == _this.rolePkForm.get('projetId').value;\n    });\n    var request = {\n      invitation: this.invitationForm.value,\n      projet: projetChoisis\n    };\n    this.invitationService.envoyerInvitation(request).subscribe(function (data) {\n      console.log(data);\n      var role = _this.roleForm.value;\n      role.pk.membreId = data.membreId;\n      console.log(role);\n      _this.roleService.ajouterRole(role).subscribe(function (data) {\n        console.log(\"role : \" + data);\n      });\n    });\n    Swal.fire('Félicitation', 'Invitation Envoiyée', 'success');\n  };\n  var _a, _b, _c;\n  SelectProjetComponent = __decorate([Component({\n    selector: 'app-select-projet',\n    templateUrl: './select-projet.component.html',\n    styleUrls: ['./select-projet.component.scss']\n  }), __metadata(\"design:paramtypes\", [ProjetServiceService, FormBuilder, FormBuilder, typeof (_a = typeof RoleService !== \"undefined\" && RoleService) === \"function\" ? _a : Object, typeof (_b = typeof InvitationService !== \"undefined\" && InvitationService) === \"function\" ? _b : Object, typeof (_c = typeof MembreService !== \"undefined\" && MembreService) === \"function\" ? _c : Object, Router])], SelectProjetComponent);\n  return SelectProjetComponent;\n}();\nexport { SelectProjetComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}