{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { Chart } from 'chart.js';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/histoire-ticket.service\";\nimport * as i3 from \"src/app/service/product-backlog.service\";\nimport * as i4 from \"@angular/common/http\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, ticketHistoireService, productBacklogService, http) {\n    this.sprintService = sprintService;\n    this.ticketHistoireService = ticketHistoireService;\n    this.productBacklogService = productBacklogService;\n    this.http = http;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var e_1, _a;\n    var sprint_start_date = new Date(sprint.dateLancement);\n    var sprint_end_date = new Date(sprint.dateFin);\n    var sprint_duration_in_days = Math.ceil((sprint_end_date.getTime() - sprint_start_date.getTime()) / (1000 * 3600 * 24));\n    var estimatedEffortData = Array(sprint_duration_in_days).fill(sprint.velocite);\n    var actualEffortData = Array(sprint_duration_in_days).fill(sprint.velocite);\n    try {\n      for (var tickets_1 = __values(tickets), tickets_1_1 = tickets_1.next(); !tickets_1_1.done; tickets_1_1 = tickets_1.next()) {\n        var ticket = tickets_1_1.value;\n        if (ticket.etat === 'Terminé') {\n          var remaining_days = sprint_duration_in_days - Math.floor((new Date(ticket.dateFin).getTime() - sprint_start_date.getTime()) / (1000 * 3600 * 24));\n          if (remaining_days >= 0) {\n            actualEffortData[remaining_days] -= ticket.effort;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (tickets_1_1 && !tickets_1_1.done && (_a = tickets_1.return)) _a.call(tickets_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    for (var i = 0; i < sprint_duration_in_days; i++) {\n      this.chart.data.labels.push(\"Day \".concat(i + 1));\n      this.chart.data.datasets[0].data.push(estimatedEffortData[i]);\n      this.chart.data.datasets[1].data.push(actualEffortData[i]);\n    }\n    this.chart.update();\n    var canvas = document.getElementById('burn-down-chart');\n    this.chart = new Chart(canvas, {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Estimated Effort',\n          data: [],\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'Actual Effort',\n          data: [],\n          borderColor: 'red',\n          fill: false\n        }]\n      },\n      options: {\n        responsive: true,\n        title: {\n          display: true,\n          text: 'Burn Down Chart'\n        },\n        scales: {\n          xAxes: [{\n            type: 'linear',\n            position: 'bottom',\n            ticks: {\n              stepSize: 1,\n              min: 0,\n              max: sprint_duration_in_days\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'Days'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'Effort'\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.HistoireTicketService), i0.ɵɵdirectiveInject(i3.ProductBacklogService), i0.ɵɵdirectiveInject(i4.HttpClient));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"burn-down-chart\", 1, \"courbe\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 0);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".courbe[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 50px;\\n  width: 800px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}