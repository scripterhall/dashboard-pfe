{"ast":null,"code":"import { __read } from \"tslib\";\nimport { ChartDataSets, Chart } from 'chart.js';\nimport { forkJoin } from 'rxjs';\nimport { MembreService } from 'src/app/service/membre.service';\nimport { TicketTacheService } from 'src/app/service/ticket-tache.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/membre.service\";\nimport * as i2 from \"src/app/service/ticket-tache.service\";\nvar HistoireMembreChartComponent = /** @class */function () {\n  function HistoireMembreChartComponent(membreService, ticketTacheService) {\n    this.membreService = membreService;\n    this.ticketTacheService = ticketTacheService;\n    this.bubbleChartData = [];\n    this.bubbleChartLegend = true;\n    this.bubbleChartPlugins = [];\n  }\n  HistoireMembreChartComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    var ticketsObservable = this.ticketTacheService.getTicketsTacheBySprint(this.sprintId);\n    var membreObservable = this.membreService.afficherTousMembres();\n    // Utilisation de forkJoin pour attendre la récupération de toutes les données\n    forkJoin([membreObservable, ticketsObservable]).subscribe(function (_a) {\n      var _b = __read(_a, 2),\n        membres = _b[0],\n        tickets = _b[1];\n      var bubbleChartData = [];\n      //ajouté dans le graphe \n      var membersAdded = [];\n      var historiesAdded = [];\n      for (var i = 0; i < membres.length; i++) {\n        var memberData = {\n          data: [],\n          label: membres[i].email,\n          r: 20\n        };\n        for (var j = 0; j < tickets.length; j++) {\n          var tache = tickets[j];\n          if (tache && tache.membreId == membres[i].id) {\n            var historyIndex = historiesAdded.indexOf(tache.ht);\n            if (historyIndex === -1) {\n              historiesAdded.push(tache.ht.id);\n              memberData.data.push({\n                x: i,\n                y: tache.ht.id,\n                r: 20\n              });\n            } else {\n              // Histoire de ticket déjà présente, on ignore cette histoire de ticket et on passe à l'itération suivante\n              continue;\n            }\n            if (membersAdded.indexOf(membres[i].id) === -1) {\n              // Membre non présent, on l'ajoute au tableau des membres\n              membersAdded.push(membres[i].id);\n            }\n            console.log(membersAdded);\n          }\n        }\n        bubbleChartData.push(memberData);\n        console.log(bubbleChartData);\n      }\n      //conf\n      var chartOptions = {\n        scales: {\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Histoire de ticket'\n            },\n            ticks: {\n              callback: function (value, index, values) {\n                var _a;\n                return (_a = tickets[index]) === null || _a === void 0 ? void 0 : _a.ht.titre;\n              }\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Membre'\n            },\n            ticks: {\n              callback: function (value, index, values) {\n                var _a;\n                return (_a = membres[index]) === null || _a === void 0 ? void 0 : _a.email;\n              }\n            },\n            gridLines: {\n              display: false,\n              drawBorder: true,\n              drawOnChartArea: true,\n              drawTicks: true\n            }\n          }]\n        },\n        tooltips: {\n          callbacks: {\n            label: function (tooltipItem, data) {\n              var datasetLabel = data.datasets[tooltipItem.datasetIndex].label;\n              var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n              console.log(value);\n              var memberName = membres[value.x].email;\n              var ticketTitle = value.y;\n              return \"\".concat(memberName, \": \").concat(ticketTitle);\n            }\n          }\n        }\n      };\n      //creation \n      _this.canvas = document.getElementById(\"bubble-chart\");\n      _this.ctx = _this.canvas.getContext(\"2d\");\n      var chart = new Chart(_this.ctx, {\n        type: 'bubble',\n        data: {\n          datasets: bubbleChartData\n        },\n        options: chartOptions\n      });\n    });\n  };\n  HistoireMembreChartComponent.ɵfac = function HistoireMembreChartComponent_Factory(t) {\n    return new (t || HistoireMembreChartComponent)(i0.ɵɵdirectiveInject(i1.MembreService), i0.ɵɵdirectiveInject(i2.TicketTacheService));\n  };\n  HistoireMembreChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HistoireMembreChartComponent,\n    selectors: [[\"app-histoire-membre-chart\"]],\n    inputs: {\n      sprintId: \"sprintId\"\n    },\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"text-light\", \"title\"], [1, \"chart-area\"], [\"id\", \"bubble-chart\"]],\n    template: function HistoireMembreChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\", 0);\n        i0.ɵɵtext(1, \"histoire-membre-chart works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelement(3, \"canvas\", 2);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return HistoireMembreChartComponent;\n}();\nexport { HistoireMembreChartComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}