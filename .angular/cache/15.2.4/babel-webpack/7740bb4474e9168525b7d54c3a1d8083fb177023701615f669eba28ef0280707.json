{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"@angular/common\";\nfunction CourbesComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"canvas\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var sprint_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Sprint \", sprint_r1.id, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"canvas-\", sprint_r1.id, \"\");\n  }\n}\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      var _loop_1 = function (i) {\n        var sprint = _this.sprints[i];\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n          // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n          console.log(tickets);\n          var labels = [];\n          var data = [];\n          var remainingEffort = sprint.velocite;\n          labels.push(sprint.dateLancement);\n          data.push(remainingEffort);\n          for (var j = 0; j < tickets.length; j++) {\n            remainingEffort -= tickets[j].effort;\n            labels.push(tickets[j].dateFin);\n            console.log(tickets.length);\n            data.push(remainingEffort);\n          }\n          labels.push(sprint.dateFin);\n          data.push(0);\n          var chart = new Chart(\"canvas-\".concat(sprint.id), {\n            type: 'line',\n            data: {\n              labels: labels,\n              datasets: [{\n                label: 'Effort restant',\n                data: data,\n                borderColor: 'blue',\n                fill: false\n              }, {\n                label: 'Tendance idéale',\n                data: _this.generateIdealTrend(sprint),\n                borderColor: 'green',\n                fill: false\n              }]\n            },\n            options: {\n              title: {\n                display: true,\n                text: \"Burn Down Chart - Sprint \".concat(sprint.id)\n              },\n              scales: {\n                xAxes: [{\n                  type: 'time',\n                  time: {\n                    unit: 'day',\n                    tooltipFormat: 'll'\n                  }\n                }],\n                yAxes: [{\n                  ticks: {\n                    beginAtZero: true,\n                    stepSize: 1\n                  }\n                }]\n              }\n            }\n          });\n        });\n      };\n      // Générer un graphique Burn Down pour chaque sprint\n      for (var i = 0; i < _this.sprints.length; i++) {\n        _loop_1(i);\n      }\n    });\n  };\n  // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  CourbesComponent.prototype.generateIdealTrend = function (sprint) {\n    var idealTrend = [];\n    idealTrend.push({\n      x: sprint.dateLancement,\n      y: sprint.velocite\n    });\n    idealTrend.push({\n      x: sprint.dateFin,\n      y: 0\n    });\n    return idealTrend;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"row\"], [\"class\", \"col\", 4, \"ngFor\", \"ngForOf\"], [1, \"col\"], [3, \"id\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, CourbesComponent_div_1_Template, 4, 2, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sprints);\n      }\n    },\n    dependencies: [i4.NgForOf],\n    styles: [\".chart[_ngcontent-%COMP%] {\\n  height: 300px;\\n  width: 500px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}