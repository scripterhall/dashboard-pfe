{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Chart } from 'chart.js';\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(http) {\n    this.http = http;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // Récupération des données du sprint depuis l'API\n    this.http.get(\"/api/sprint/\".concat(this.sprintId)).subscribe(function (data) {\n      _this.dateLancement = new Date(data.dateLancement);\n      _this.dateFin = new Date(data.dateFin);\n      _this.velocite = data.velocite;\n      _this.histoires = data.histoires;\n      // Calcul du nombre de jours du sprint\n      var nbJours = Math.ceil((_this.dateFin.getTime() - _this.dateLancement.getTime()) / (1000 * 3600 * 24));\n      // Initialisation des données pour le graphique\n      var labels = [];\n      var data = [];\n      var dataIdeal = [];\n      var effortTotal = _this.histoires.reduce(function (total, histoire) {\n        return total + histoire.effort;\n      }, 0);\n      var effortParJour = effortTotal / nbJours;\n      var effortRestant = effortTotal;\n      var _loop_1 = function (i) {\n        var date = new Date(_this.dateLancement);\n        date.setDate(date.getDate() + i);\n        labels.push(date.toLocaleDateString());\n        // Calcul de l'effort restant pour ce jour\n        effortRestant -= effortParJour;\n        _this.histoires.forEach(function (histoire) {\n          if (new Date(histoire.dateCreation).getTime() <= date.getTime() && !histoire.terminee) {\n            effortRestant -= histoire.effort;\n            histoire.terminee = true;\n          }\n        });\n        data.push(Math.max(0, effortRestant.toFixed(2)));\n        dataIdeal.push(Math.max(0, (effortTotal - i * effortParJour).toFixed(2)));\n      };\n      // Boucle sur chaque jour du sprint\n      for (var i = 0; i <= nbJours; i++) {\n        _loop_1(i);\n      }\n      // Création du graphique avec Chart.js\n      var chart = new Chart('canvas', {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Effort restant',\n            data: data,\n            borderColor: 'blue',\n            fill: false\n          }, {\n            label: 'Effort idéal',\n            data: dataIdeal,\n            borderColor: 'green',\n            borderDash: [5, 5],\n            fill: false\n          }]\n        },\n        options: {\n          legend: {\n            display: true\n          },\n          scales: {\n            xAxes: [{\n              display: true\n            }],\n            yAxes: [{\n              display: true,\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      });\n    });\n  };\n  var _a;\n  CourbesComponent = __decorate([Component({\n    selector: 'app-courbes',\n    templateUrl: './courbes.component.html',\n    styleUrls: ['./courbes.component.scss']\n  }), __metadata(\"design:paramtypes\", [typeof (_a = typeof HttpClient !== \"undefined\" && HttpClient) === \"function\" ? _a : Object])], CourbesComponent);\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}