{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar _c0 = [\"burnUpChart\"];\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.sprints = [{\n      id: 1,\n      velocity: 10,\n      startDate: '2023-01-01',\n      endDate: '2023-01-14'\n    }, {\n      id: 2,\n      velocity: 15,\n      startDate: '2023-01-15',\n      endDate: '2023-01-28'\n    }, {\n      id: 3,\n      velocity: 20,\n      startDate: '2023-01-29',\n      endDate: '2023-02-11'\n    }];\n    this.tickets = [{\n      id: 1,\n      storyPoints: 3,\n      sprintId: 1,\n      startDate: '2023-01-01',\n      endDate: '2023-01-03'\n    }, {\n      id: 2,\n      storyPoints: 5,\n      sprintId: 1,\n      startDate: '2023-01-02',\n      endDate: '2023-01-05'\n    }, {\n      id: 3,\n      storyPoints: 8,\n      sprintId: 2,\n      startDate: '2023-01-15',\n      endDate: '2023-01-19'\n    }, {\n      id: 4,\n      storyPoints: 2,\n      sprintId: 2,\n      startDate: '2023-01-16',\n      endDate: '2023-01-18'\n    }, {\n      id: 5,\n      storyPoints: 10,\n      sprintId: 3,\n      startDate: '2023-01-30',\n      endDate: '2023-02-05'\n    }];\n    this.chartData = [];\n  }\n  CourbesComponent.prototype.ngAfterViewInit = function () {\n    for (var i = 0; i < this.sprints.length; i++) {\n      var sprint = this.sprints[i];\n      var plannedPoints = 0;\n      var actualPoints = 0;\n      for (var j = 0; j < this.tickets.length; j++) {\n        var ticket = this.tickets[j];\n        if (ticket.sprintId <= sprint.id) {\n          plannedPoints += ticket.storyPoints;\n          if (ticket.endDate <= sprint.endDate) {\n            actualPoints += ticket.storyPoints;\n          }\n        }\n      }\n      var data = {\n        sprintId: sprint.id,\n        planned: plannedPoints,\n        actual: actualPoints\n      };\n      this.chartData.push(data);\n    }\n    var chartLabels = this.sprints.map(function (sprint) {\n      return \"Sprint \".concat(sprint.id);\n    });\n    var plannedData = this.chartData.map(function (data) {\n      return data.planned;\n    });\n    var actualData = this.chartData.map(function (data) {\n      return data.actual;\n    });\n    var totalPlanned = plannedData.reduce(function (acc, val) {\n      return acc + val;\n    }, 0);\n    var totalActual = actualData.reduce(function (acc, val) {\n      return acc + val;\n    }, 0);\n    var ctx = this.chartElement.nativeElement.getContext('2d');\n    var chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: 'Planned',\n          data: plannedData,\n          borderColor: '#007bff',\n          fill: false\n        }, {\n          label: 'Actual',\n          data: actualData,\n          borderColor: '#28a745',\n          fill: false\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Burn Up Chart'\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              min: 0,\n              max: Math.max(totalPlanned, totalActual),\n              stepSize: 5\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'Story Points'\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Sprint'\n            }\n          }]\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false\n        }\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    viewQuery: function CourbesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartElement = _t.first);\n      }\n    },\n    decls: 0,\n    vars: 0,\n    template: function CourbesComponent_Template(rf, ctx) {}\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}