{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.sprints = [];\n    this.tickets = [];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n    }, function (error) {\n      console.error(error);\n    });\n  };\n  CourbesComponent.prototype.onSprintSelectChange = function () {\n    var _this = this;\n    var selectedSprintId = Number(document.getElementById('sprintSelect').value);\n    this.histoireTicketService.getHistoireTicketBySprintId(selectedSprintId).subscribe(function (tickets) {\n      _this.tickets = tickets;\n      _this.selectedSprint = _this.sprints.find(function (sprint) {\n        return sprint.id === selectedSprintId;\n      });\n      _this.drawBurnDownChart();\n    }, function (error) {\n      console.error(error);\n    });\n  };\n  CourbesComponent.prototype.drawBurnDownChart = function () {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    var canvas = document.getElementById('burnDownChart');\n    var context = canvas.getContext('2d');\n    if (!context) {\n      throw new Error('Cannot get context of canvas');\n    }\n    var labels = this.getLabels();\n    var data = this.getData();\n    var chartConfig = {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Effort réel',\n          data: data.actualEffort,\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'Effort idéal',\n          data: data.idealEffort,\n          borderColor: 'red',\n          fill: false\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'category',\n            labels: labels\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Effort'\n            }\n          }\n        }\n      }\n    };\n    this.chart = new Chart(context, chartConfig);\n  };\n  CourbesComponent.prototype.getLabels = function () {\n    var startDate = new Date(this.selectedSprint.dateLancement);\n    var endDate = new Date(this.selectedSprint.dateFin);\n    var labels = [];\n    var days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    for (var i = 0; i <= days; i++) {\n      var date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n      labels.push(date.toISOString().slice(0, 10));\n    }\n    return labels;\n  };\n  CourbesComponent.prototype.getData = function () {\n    var data = {\n      actualEffort: [],\n      idealEffort: []\n    };\n    var remainingEffort = this.tickets.reduce(function (sum, ticket) {\n      return sum + ticket.effort;\n    }, 0);\n    var startDate = new Date(this.selectedSprint.dateLancement);\n    var endDate = new Date(this.selectedSprint.dateFin);\n    var days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    var idealEffortPerDay = remainingEffort / days;\n    data.actualEffort.push(remainingEffort);\n    data.idealEffort.push(remainingEffort);\n    var _loop_1 = function (i) {\n      var date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n      var effortForDate = this_1.tickets.filter(function (ticket) {\n        return ticket.dateFin <= date;\n      }).reduce(function (sum, ticket) {\n        return sum + ticket.effort;\n      }, 0);\n      remainingEffort -= effortForDate;\n      data.actualEffort.push(remainingEffort);\n      data.idealEffort.push(Math.max(0, data.idealEffort[0] - idealEffortPerDay * i));\n    };\n    var this_1 = this;\n    for (var i = 1; i <= days; i++) {\n      _loop_1(i);\n    }\n    return data;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 0,\n    vars: 0,\n    template: function CourbesComponent_Template(rf, ctx) {}\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}