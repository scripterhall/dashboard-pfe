{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.sprints = [{\n      id: 1,\n      dateLancement: new Date('2022-01-01'),\n      dateFin: new Date('2022-01-14'),\n      velocite: 20\n    }, {\n      id: 2,\n      dateLancement: new Date('2022-01-15'),\n      dateFin: new Date('2022-01-28'),\n      velocite: 25\n    }, {\n      id: 3,\n      dateLancement: new Date('2022-01-29'),\n      dateFin: new Date('2022-02-11'),\n      velocite: 30\n    }, {\n      id: 4,\n      dateLancement: new Date('2022-02-12'),\n      dateFin: new Date('2022-02-25'),\n      velocite: 25\n    }];\n    this.ticketsHistoire = [{\n      id: 1,\n      idSprint: 1,\n      effort: 10,\n      dateDebut: new Date('2022-01-02'),\n      dateFin: new Date('2022-01-08')\n    }, {\n      id: 2,\n      idSprint: 1,\n      effort: 15,\n      dateDebut: new Date('2022-01-05'),\n      dateFin: new Date('2022-01-12')\n    }, {\n      id: 3,\n      idSprint: 2,\n      effort: 8,\n      dateDebut: new Date('2022-01-16'),\n      dateFin: new Date('2022-01-22')\n    }, {\n      id: 4,\n      idSprint: 2,\n      effort: 12,\n      dateDebut: new Date('2022-01-19'),\n      dateFin: new Date('2022-01-26')\n    }, {\n      id: 5,\n      idSprint: 3,\n      effort: 18,\n      dateDebut: new Date('2022-01-30'),\n      dateFin: new Date('2022-02-05')\n    }, {\n      id: 6,\n      idSprint: 3,\n      effort: 22,\n      dateDebut: new Date('2022-02-02'),\n      dateFin: new Date('2022-02-09')\n    }, {\n      id: 7,\n      idSprint: 4,\n      effort: 16,\n      dateDebut: new Date('2022-02-13'),\n      dateFin: new Date('2022-02-19')\n    }, {\n      id: 8,\n      idSprint: 4,\n      effort: 18,\n      dateDebut: new Date('2022-02-16'),\n      dateFin: new Date('2022-02-23')\n    }];\n    this.datasets = [];\n    this.labels = [];\n    this.options = {\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }],\n        xAxes: [{\n          type: 'category',\n          labels: sprintNumbers,\n          scaleLabel: {\n            display: true,\n            labelString: 'Numéro de sprint'\n          }\n        }]\n      }\n    };\n    this.legend = true;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    // Tri des sprints par date de lancement\n    this.sprints.sort(function (a, b) {\n      return a.dateLancement - b.dateLancement;\n    });\n    // Initialisation des données du burn-up chart\n    var cumulativeEffort = 0;\n    var data = [];\n    var _loop_1 = function (i) {\n      var sprint = this_1.sprints[i];\n      var tickets = this_1.ticketsHistoire.filter(function (ticket) {\n        return ticket.idSprint === sprint.id;\n      });\n      var sprintEffort = 0;\n      // Boucle à travers tous les tickets histoire pour calculer l'effort total de chaque sprint\n      for (var j = 0; j < tickets.length; j++) {\n        sprintEffort += tickets[j].effort;\n      }\n      // Calcul de l'effort cumulé pour ce sprint\n      cumulativeEffort += sprintEffort;\n      // Ajout du nouvel effort cumulé et de la vélocité pour ce sprint à notre tableau de données\n      data.push({\n        x: sprint.dateFin,\n        y: cumulativeEffort\n      });\n      // Ajout du label du sprint à notre tableau de labels\n      this_1.labels.push('Sprint ' + sprint.numero);\n      // Si nous avons atteint le dernier sprint, ajout de la ligne de tendance\n      if (i === this_1.sprints.length - 1) {\n        var trendEffort = cumulativeEffort / (sprint.dateFin.getTime() - this_1.sprints[0].dateLancement.getTime()) * (sprint.dateFin.getTime() - this_1.sprints[0].dateLancement.getTime());\n        data.push({\n          x: sprint.dateFin,\n          y: trendEffort,\n          trend: true\n        });\n      }\n    };\n    var this_1 = this;\n    // Boucle à travers tous les sprints pour récupérer les tickets histoire et calculer l'effort cumulé\n    for (var i = 0; i < this.sprints.length; i++) {\n      _loop_1(i);\n    }\n    // Ajout des données à notre tableau de datasets\n    this.datasets.push({\n      data: data,\n      label: 'Effort cumulé',\n      borderColor: 'red',\n      fill: false\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[2, \"position\", \"relative\", \"top\", \"50px\"], [\"chart\", \"\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}