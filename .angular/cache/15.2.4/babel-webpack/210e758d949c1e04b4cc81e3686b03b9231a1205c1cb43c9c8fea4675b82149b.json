{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.chartOptions = {\n      responsive: true,\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    };\n    this.chartColors = [{\n      backgroundColor: 'rgba(255, 0, 0, 0.3)',\n      borderColor: 'red'\n    }];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    var sprintId = Number(this.route.snapshot.paramMap.get('sprintId'));\n    this.sprintService.getSprintById(sprintId).subscribe(function (sprint) {\n      _this.sprint = sprint;\n      _this.sprintService.getHistoireTicketBySprintId(sprintId).subscribe(function (tickets) {\n        _this.tickets = tickets;\n        _this.chartLabels = _this.generateLabels();\n        _this.chartData = [{\n          data: _this.generateIdealLineData(),\n          label: 'Idéal'\n        }, {\n          data: _this.generateActualLineData(),\n          label: 'Réel'\n        }];\n      });\n    });\n  };\n  CourbesComponent.prototype.generateLabels = function () {\n    var sprintLength = this.sprint.velocite;\n    var labels = [];\n    for (var i = 1; i <= sprintLength; i++) {\n      labels.push(\"Sprint \".concat(i));\n    }\n    return labels;\n  };\n  CourbesComponent.prototype.generateIdealLineData = function () {\n    var sprintLength = this.sprint.velocite;\n    var idealLineData = [];\n    var totalEffort = 0;\n    for (var i = 1; i <= sprintLength; i++) {\n      totalEffort += this.sprint.velocite;\n      idealLineData.push(totalEffort);\n    }\n    return idealLineData;\n  };\n  CourbesComponent.prototype.generateActualLineData = function () {\n    var _this = this;\n    var sprintLength = this.sprint.velocite;\n    var actualLineData = [];\n    var totalEffort = 0;\n    for (var i = 1; i <= sprintLength; i++) {\n      var sprintTickets = this.tickets.filter(function (ticket) {\n        return ticket.sprintId === _this.sprint.id;\n      });\n      var sprintTicketsEffort = sprintTickets.reduce(function (acc, ticket) {\n        return acc + ticket.effort;\n      }, 0);\n      totalEffort += sprintTicketsEffort;\n      actualLineData.push(totalEffort);\n    }\n    return actualLineData;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"burnUpChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}