{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ElementRef } from '@angular/core';\nimport Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar _c0 = [\"chartRef\"];\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.sprints = [{\n      id: 1,\n      dateLancement: '2023-04-01',\n      dateFin: '2023-04-14',\n      velocite: 29\n    }, {\n      id: 2,\n      dateLancement: '2023-04-15',\n      dateFin: '2023-04-28',\n      velocite: 34\n    }, {\n      id: 3,\n      dateLancement: '2023-04-29',\n      dateFin: '2023-05-12',\n      velocite: 8\n    }, {\n      id: 4,\n      dateLancement: '2023-05-13',\n      dateFin: '2023-05-26',\n      velocite: 10\n    }];\n    this.tickets = [{\n      id: 1,\n      idSprint: 1,\n      dateDebut: '2023-04-02',\n      dateFin: '2023-04-08',\n      effort: 5,\n      etat: 'terminé'\n    }, {\n      id: 2,\n      idSprint: 1,\n      dateDebut: '2023-04-02',\n      dateFin: '2023-04-08',\n      effort: 8,\n      etat: 'terminé'\n    }, {\n      id: 3,\n      idSprint: 1,\n      dateDebut: '2023-04-03',\n      dateFin: '2023-04-12',\n      effort: 13,\n      etat: 'terminé'\n    }, {\n      id: 4,\n      idSprint: 1,\n      dateDebut: '2023-04-05',\n      dateFin: '2023-04-13',\n      effort: 3,\n      etat: 'en cours'\n    }, {\n      id: 5,\n      idSprint: 2,\n      dateDebut: '2023-04-16',\n      dateFin: '2023-04-18',\n      effort: 8,\n      etat: 'terminé'\n    }, {\n      id: 6,\n      idSprint: 2,\n      dateDebut: '2023-04-19',\n      dateFin: '2023-04-21',\n      effort: 5,\n      etat: 'terminé'\n    }, {\n      id: 7,\n      idSprint: 2,\n      dateDebut: '2023-04-24',\n      dateFin: '2023-04-27',\n      effort: 21,\n      etat: 'en attente'\n    }, {\n      id: 8,\n      idSprint: 3,\n      dateDebut: '2023-04-30',\n      dateFin: '2023-05-',\n      effort: 8,\n      etat: 'terminé'\n    }];\n  }\n  CourbesComponent.prototype.ngAfterViewInit = function () {\n    var e_1, _a, e_2, _b;\n    // Générer les données pour chaque sprint\n    var data = [];\n    try {\n      for (var _c = __values(this.sprints), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var sprint = _d.value;\n        var sprintData = {\n          x: sprint.id,\n          y: 0,\n          velocite: sprint.velocite\n        };\n        try {\n          for (var _e = (e_2 = void 0, __values(this.tickets)), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var ticket = _f.value;\n            if (ticket.idSprint === sprint.id && ticket.etat === 'terminé') {\n              var effort = ticket.effort ? ticket.effort : 0;\n              sprintData.y += effort;\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n        data.push(sprintData);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    // Initialiser le chart\n    var chartData = {\n      datasets: [{\n        label: 'Effort terminé',\n        data: data,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }, {\n        label: 'Vélocité',\n        data: this.sprints.map(function (sprint) {\n          return {\n            x: sprint.id,\n            y: sprint.velocite\n          };\n        }),\n        type: 'line',\n        borderColor: 'rgba(255, 99, 132, 1)',\n        borderWidth: 1\n      }]\n    };\n    var chartOptions = {\n      scales: {\n        x: {\n          type: 'linear',\n          position: 'bottom',\n          title: {\n            display: true,\n            text: 'Sprint'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Effort (points)'\n          }\n        }\n      },\n      plugins: {\n        title: {\n          display: true,\n          text: 'Burn-up chart'\n        }\n      }\n    };\n    // Créer le chart\n    this.chart = new Chart(this.chartRef.nativeElement, {\n      type: 'bar',\n      data: chartData,\n      options: chartOptions\n    });\n  };\n  CourbesComponent.prototype.ngOnInit = function () {};\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    viewQuery: function CourbesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartRef = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[2, \"position\", \"relative\", \"top\", \"30px\"], [\"chartRef\", \"\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}