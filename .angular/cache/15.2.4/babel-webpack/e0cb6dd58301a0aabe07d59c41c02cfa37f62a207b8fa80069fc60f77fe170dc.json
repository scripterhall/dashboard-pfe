{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.chart = [];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // Récupérer la liste des sprints pour le backlog de produit\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n      console.log(_this.sprints);\n      // Initialiser les tableaux de données pour le graphique\n      var effortEstime = [];\n      var effortEffectue = [];\n      var dates = [];\n      var sommeEffort = 0;\n      var sommeVelocite = 0;\n      var velociteMoyenne = 0;\n      var _loop_1 = function (i) {\n        _this.histoireTicketService.getHistoireTicketBySprintId(_this.sprints[i].id).subscribe(function (data) {\n          _this.ticketsHistoire = data;\n          console.log(_this.ticketsHistoire);\n          // Calculer la somme des efforts estimés pour tous les tickets histoire dans le sprint\n          var sommeEffortEstime = 0;\n          for (var j = 0; j < _this.ticketsHistoire.length; j++) {\n            sommeEffortEstime += _this.ticketsHistoire[j].effort;\n          }\n          effortEstime.push(sommeEffortEstime);\n          // Calculer la somme des efforts effectués pour tous les tickets histoire dans le sprint\n          var sommeEffortEffectue = 0;\n          for (var j = 0; j < _this.ticketsHistoire.length; j++) {\n            if (_this.ticketsHistoire[j].dateFin <= _this.sprints[i].dateFin) {\n              sommeEffortEffectue += _this.ticketsHistoire[j].effort;\n            }\n          }\n          effortEffectue.push(sommeEffortEffectue);\n          // Ajouter la date de fin du sprint aux dates pour le graphique\n          dates.push(_this.sprints[i].dateFin);\n          // Calculer la vélocité moyenne pour les sprints jusqu'à présent\n          sommeEffort += sommeEffortEstime;\n          sommeVelocite += _this.sprints[i].velocite;\n          velociteMoyenne = sommeEffort / sommeVelocite;\n          console.log(sommeEffort);\n          console.log(dates);\n          console.log(dates);\n        });\n        // Générer le graphique une fois que toutes les données ont été récupérées\n        if (i === _this.sprints.length - 1) {\n          _this.chart = new Chart('canvas', {\n            type: 'line',\n            data: {\n              labels: dates,\n              datasets: [{\n                label: 'Effort Estimé',\n                data: effortEstime,\n                borderColor: 'green',\n                fill: false\n              }, {\n                label: 'Effort Effectué',\n                data: effortEffectue,\n                borderColor: '#f00',\n                fill: false\n              }, {\n                label: 'Vélocité Moyenne',\n                data: Array(dates.length).fill(velociteMoyenne),\n                borderColor: '#00f',\n                fill: false\n              }]\n            },\n            options: {\n              title: {\n                display: true,\n                text: 'Burn Up Chart'\n              },\n              scales: {\n                xAxes: [{\n                  display: true,\n                  type: 'time',\n                  time: {\n                    unit: 'day',\n                    tooltipFormat: 'YYYY-MM-DD'\n                  },\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Date'\n                  }\n                }],\n                yAxes: [{\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Effort'\n                  }\n                }]\n              }\n            }\n          });\n        }\n      };\n      // Boucler sur chaque sprint pour récupérer les tickets histoire et calculer la vélocité moyenne\n      for (var i = 0; i < _this.sprints.length; i++) {\n        _loop_1(i);\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"canvas\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 0);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}