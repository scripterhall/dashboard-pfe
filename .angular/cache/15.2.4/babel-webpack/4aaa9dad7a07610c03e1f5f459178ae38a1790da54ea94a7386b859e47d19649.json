{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/histoire-ticket.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/sprint.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(histoireTicketService, productBacklogService, sprintService) {\n    this.histoireTicketService = histoireTicketService;\n    this.productBacklogService = productBacklogService;\n    this.sprintService = sprintService;\n    this.sprintsVelocitySum = 0;\n  }\n  CourbesComponent.prototype.gethistoireTicketsProjet = function (productBacklogId) {\n    var _this = this;\n    this.productBacklogService.getHistoireTicketsByProductBacklogId(productBacklogId).subscribe(function (histoireTicketsProjet) {\n      return _this.histoireTicketsProjet = histoireTicketsProjet;\n    });\n  };\n  CourbesComponent.prototype.getProjetFromLocalStorage = function () {\n    var projetCourantStr = localStorage.getItem(\"projetCourant\");\n    var projetCourantObj = JSON.parse(projetCourantStr);\n    return projetCourantObj;\n  };\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.gethistoireTicketsProjet(this.productBacklogService.getProductBacklogByIdFromLocalStorage());\n    var projet = this.getProjetFromLocalStorage();\n    var dateDebut = new Date(projet.dateDebut);\n    var dateFin = new Date(projet.dateFin);\n    var diffTemps = dateFin.getTime() - dateDebut.getTime();\n    var diffJours = Math.ceil(diffTemps / (1000 * 60 * 60 * 24));\n    console.log(\"Le projet a une dur\\u00E9e de \".concat(diffJours, \" jours\"));\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n      var nbrSprints = data.length;\n      console.log(\"Nombre de sprints: \" + nbrSprints);\n      _this.sprints.forEach(function (sprint) {\n        _this.sprintsVelocitySum += sprint.velocite;\n      });\n      console.log(\"Somme de vélocité des sprints: \" + _this.sprintsVelocitySum);\n    });\n  };\n  CourbesComponent.prototype.generateBurnDownChart = function () {\n    var _this = this;\n    // Get the canvas element\n    var canvas = document.getElementById('burnDownChart');\n    // Calculate the total effort for the project\n    var totalEffort = this.histoireTicketsProjet.reduce(function (sum, ticket) {\n      return sum + ticket.effort;\n    }, 0);\n    // Create an array to store the data for the burn down chart\n    var data = [];\n    // Initialize the remaining effort to the total effort for the project\n    var remainingEffort = totalEffort;\n    var _loop_1 = function (i) {\n      // Calculate the expected remaining effort for the sprint\n      var expectedRemainingEffort = totalEffort - this_1.sprintsVelocitySum * (i + 1);\n      // Calculate the actual remaining effort for the sprint\n      var actualRemainingEffort = this_1.histoireTicketsProjet.reduce(function (sum, ticket) {\n        if (ticket.sprintId <= _this.sprints[i].id) {\n          return sum + ticket.effort;\n        } else {\n          return sum;\n        }\n      }, 0);\n      // Add the data for the sprint to the data array\n      data.push({\n        x: i + 1,\n        y: remainingEffort\n      });\n      // Update the remaining effort for the project\n      remainingEffort -= actualRemainingEffort;\n      // If the expected remaining effort is less than or equal to zero, break out of the loop\n      if (expectedRemainingEffort <= 0) {\n        return \"break\";\n      }\n    };\n    var this_1 = this;\n    // Loop through each sprint\n    for (var i = 0; i < this.sprints.length; i++) {\n      var state_1 = _loop_1(i);\n      if (state_1 === \"break\") break;\n    }\n    // Create the burn down chart\n    new Chart(canvas, {\n      type: 'line',\n      data: {\n        datasets: [{\n          label: 'Burn Down Chart',\n          data: data,\n          fill: false,\n          borderColor: 'blue',\n          backgroundColor: 'blue'\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Burn Down Chart'\n        },\n        scales: {\n          xAxes: [{\n            type: 'linear',\n            position: 'bottom',\n            scaleLabel: {\n              display: true,\n              labelString: 'Sprint'\n            }\n          }],\n          yAxes: [{\n            type: 'linear',\n            position: 'bottom',\n            ticks: {\n              beginAtZero: true,\n              max: totalEffort\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'Effort Remaining'\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.HistoireTicketService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.SprintService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"burnDownChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}