{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n      console.log(data);\n      var ticketsArray = []; // création d'un tableau vide pour stocker les tickets\n      _this.sprints.forEach(function (sprint) {\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n          console.log(\"Tickets histoire pour le sprint \".concat(sprint.id, \": \"), tickets);\n          ticketsArray.push(tickets); // ajout des tickets au tableau\n        }, function (error) {\n          console.error(error);\n        });\n      });\n      console.log('Tickets de chaque sprint :', ticketsArray); // affichage du tableau complet\n    }, function (error) {\n      console.error(error);\n    });\n    // génère les données pour l'axe X (dates) et pour l'axe Y (effort restant)\n    var labels = [];\n    var data = [];\n    var remainingEffort = this.sprint.velocity;\n    labels.push(this.sprint.startDate);\n    data.push(remainingEffort);\n    for (var i = 0; i < this.tickets.length; i++) {\n      remainingEffort -= this.tickets[i].effort;\n      labels.push(this.tickets[i].endDate);\n      data.push(remainingEffort);\n    }\n    labels.push(this.sprint.endDate);\n    data.push(0);\n    this.chart.data.labels = labels;\n    this.chart.data.datasets[0].data = data;\n    this.chart.update();\n  };\n  // génère la tendance idéale (droite qui part de la vélocité à la date de lancement jusqu'à 0 à la date de fin)\n  CourbesComponent.prototype.generateIdealTrend = function () {\n    var idealTrend = [];\n    idealTrend.push({\n      x: this.sprint.startDate,\n      y: this.sprint.velocity\n    });\n    idealTrend.push({\n      x: this.sprint.endDate,\n      y: 0\n    });\n    return idealTrend;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 0,\n    vars: 0,\n    template: function CourbesComponent_Template(rf, ctx) {}\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}