{"ast":null,"code":"import { __decorate, __metadata, __values } from \"tslib\";\nimport { Component, ElementRef, ViewChild } from \"@angular/core\";\nimport { Chart } from 'chart.js';\nimport { HistoireTicketService } from \"src/app/service/histoire-ticket.service\";\nimport { ProductBacklogService } from \"src/app/service/product-backlog.service\";\nimport { ProjetServiceService } from \"src/app/service/projet-service.service\";\nimport { SprintService } from \"src/app/service/sprint.service\";\nvar DashboardComponent = /** @class */function () {\n  function DashboardComponent(sprintService, productBacklogService, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.clicked = true;\n    this.clicked1 = false;\n    this.clicked2 = false;\n    this.tickets = [];\n    this.sprints = [];\n  }\n  DashboardComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    var storedObject = localStorage.getItem(\"projetCourant\");\n    var parsedObject = JSON.parse(storedObject);\n    this.projet = parsedObject;\n    this.productBacklogService.getProductBacklogByIdProjet(this.projetService.getProjetByIdFromLocalStorage()).subscribe(function (data) {\n      var productBacklog = data;\n      localStorage.setItem('productBacklogCourant', JSON.stringify(productBacklog));\n    }, function (error) {\n      console.log('Une erreur s\\'est produite lors de la récupération du product backlog : ', error);\n    });\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      if (sprints.length > 0) {\n        _this.sprintSelectedIndex = 0;\n        _this.sprints = sprints;\n        // Générer un graphique Burn Down pour chaque sprint\n        if (_this.sprints.length != 0) {\n          var _loop_1 = function (i) {\n            var sprint = _this.sprints[i];\n            _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n              // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n              var labels = [];\n              var data = [];\n              var remainingEffort = sprint.velocite;\n              labels.push(sprint.dateLancement);\n              data.push(remainingEffort);\n              for (var j = 0; j < tickets.length; j++) {\n                remainingEffort -= tickets[j].effort;\n                labels.push(tickets[j].dateFin);\n                data.push(remainingEffort);\n              }\n              labels.push(sprint.dateFin);\n              data.push(0);\n              var chart = new Chart(\"canvas-\".concat(sprint.id), {\n                type: 'line',\n                data: {\n                  labels: labels,\n                  datasets: [{\n                    label: 'Effort restant',\n                    data: data,\n                    borderColor: 'orange',\n                    fill: false\n                  }, {\n                    label: 'Tendance idéale',\n                    data: _this.generateIdealTrend(sprint),\n                    borderColor: '#00d6b4',\n                    fill: false\n                  }]\n                },\n                options: {\n                  title: {\n                    display: true,\n                    text: \"Burn Down Chart\"\n                  },\n                  responsive: true,\n                  scales: {\n                    xAxes: [{\n                      type: 'time',\n                      time: {\n                        unit: 'day',\n                        tooltipFormat: 'll'\n                      },\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Jours de sprint'\n                      },\n                      ticks: {\n                        beginAtZero: true,\n                        stepSize: 1\n                      }\n                    }],\n                    yAxes: [{\n                      ticks: {\n                        beginAtZero: true,\n                        stepSize: 1\n                      },\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Effort restant (points)'\n                      }\n                    }]\n                  }\n                }\n              });\n            });\n          };\n          for (var i = 0; i < _this.sprints.length; i++) {\n            _loop_1(i);\n          }\n        }\n      }\n    });\n    //Pour la deuxième courbe\n    this.histoireTicketService.getListHistoireTicketByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.tickets = data;\n      console.log(_this.tickets);\n    }, function (error) {\n      console.log(error);\n    });\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      if (data.length > 0) {\n        _this.sprintsProjet = data;\n        console.log(_this.sprintsProjet);\n      } else {\n        console.log('Pas de sprints !');\n      }\n      var myChart = new Chart(_this.myChart.nativeElement.getContext('2d'), {\n        type: 'line',\n        data: _this.getChartData(),\n        options: _this.getChartOptions()\n      });\n    }, function (error) {\n      console.log(error);\n    });\n  };\n  DashboardComponent.prototype.onSprintSelected = function (index) {\n    if (this.sprints && this.sprints.length > 0) {\n      this.sprintSelectedIndex = index;\n    }\n  };\n  DashboardComponent.prototype.updateOptions = function () {\n    this.myChartData.data.datasets[0].data = this.data;\n    this.myChartData.update();\n  };\n  // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  DashboardComponent.prototype.generateIdealTrend = function (sprint) {\n    var idealTrend = [];\n    idealTrend.push({\n      x: sprint.dateLancement,\n      y: sprint.velocite\n    });\n    idealTrend.push({\n      x: sprint.dateFin,\n      y: 0\n    });\n    return idealTrend;\n  };\n  //Pour la deuxième courbe\n  DashboardComponent.prototype.getChartData = function () {\n    var labels = this.sprintsProjet.map(function (sprint) {\n      return 'sp' + sprint.id;\n    });\n    var data = {\n      labels: labels,\n      datasets: [{\n        pointHoverRadius: 6,\n        pointBorderWidth: 1.5,\n        pointHoverBackgroundColor: 'gray',\n        label: 'Effort terminé',\n        data: this.getScopeCreepData(),\n        fill: false,\n        borderColor: 'red'\n      }, {\n        label: 'Effort planifié',\n        data: this.getEffortPlanifieData(),\n        fill: false,\n        borderColor: 'green',\n        pointBorderWidth: 1.5\n      }]\n    };\n    return data;\n  };\n  DashboardComponent.prototype.getScopeCreepData = function () {\n    var e_1, _a;\n    var scopeCreepData = [];\n    var scopeCreepTotal = 0;\n    var _loop_2 = function (sprint) {\n      var userStoriesInSprint = this_1.tickets.filter(function (us) {\n        return us.sprintId === sprint.id;\n      });\n      var scopeCreepInSprint = userStoriesInSprint.reduce(function (acc, us) {\n        return acc + us.effort * (us.status === 'TERMINE' ? 1 : 0);\n      }, 0);\n      scopeCreepTotal = scopeCreepTotal + scopeCreepInSprint;\n      scopeCreepData.push(scopeCreepTotal);\n    };\n    var this_1 = this;\n    try {\n      for (var _b = __values(this.sprintsProjet), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sprint = _c.value;\n        _loop_2(sprint);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return scopeCreepData;\n  };\n  DashboardComponent.prototype.getEffortPlanifieData = function () {\n    var e_2, _a;\n    if (this.sprintsProjet && this.sprintsProjet.length > 0) {\n      var effortPlanifieData = [];\n      var effortPlanifieTotal = 0;\n      try {\n        for (var _b = __values(this.sprintsProjet), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var sprint = _c.value;\n          effortPlanifieTotal += sprint.velocite;\n          effortPlanifieData.push(effortPlanifieTotal);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      return effortPlanifieData;\n    }\n  };\n  DashboardComponent.prototype.getChartOptions = function () {\n    return {\n      responsive: true,\n      tooltips: {\n        backgroundColor: '#f5f5f5',\n        titleFontColor: '#333',\n        bodyFontColor: '#666',\n        bodySpacing: 4,\n        xPadding: 14,\n        mode: \"nearest\",\n        intersect: 0,\n        position: \"nearest\"\n      },\n      title: {\n        display: true,\n        text: 'Burn-up chart',\n        fontSize: 20,\n        fontColor: 'rgb(226, 226, 226)'\n      },\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Sprints',\n            fontColor: 'rgb(226, 226, 226)',\n            fontSize: 14\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Efforts (en points )',\n            fontColor: 'rgb(226, 226, 226)',\n            fontSize: 14\n          },\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    };\n  };\n  __decorate([ViewChild('myChart', {\n    static: true\n  }), __metadata(\"design:type\", ElementRef)], DashboardComponent.prototype, \"myChart\", void 0);\n  DashboardComponent = __decorate([Component({\n    selector: \"app-dashboard\",\n    templateUrl: \"dashboard.component.html\",\n    styleUrls: ['./dashboard.component.scss']\n  }), __metadata(\"design:paramtypes\", [SprintService, ProductBacklogService, HistoireTicketService, ProjetServiceService])], DashboardComponent);\n  return DashboardComponent;\n}();\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}