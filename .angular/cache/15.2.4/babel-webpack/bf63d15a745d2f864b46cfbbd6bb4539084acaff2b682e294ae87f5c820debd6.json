{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar _c0 = [\"burnUpChart\"];\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.sprints = [];\n    this.tickets = [];\n    this.doneData = [];\n    this.todoData = [];\n    this.scopeData = [];\n    this.sprintLabels = [];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      // Initialize project start and end dates with first sprint's dates\n      _this.projectStartDate = new Date(_this.sprints[0].dateLancement);\n      _this.projectEndDate = new Date(_this.sprints[0].dateFin);\n      for (var i = 0; i < _this.sprints.length; i++) {\n        var sprint = _this.sprints[i];\n        // Update project start and end dates\n        var sprintStartDate = new Date(sprint.dateLancement);\n        var sprintEndDate = new Date(sprint.dateFin);\n        if (sprintStartDate < _this.projectStartDate) {\n          _this.projectStartDate = sprintStartDate;\n        }\n        if (sprintEndDate > _this.projectEndDate) {\n          _this.projectEndDate = sprintEndDate;\n        }\n        // Add sprint label\n        _this.sprintLabels.push(\"sp\".concat(sprint.id, \" (\").concat(sprint.dateFin, \")\"));\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n          _this.tickets = tickets;\n          var doneTotal = 0;\n          var todoTotal = 0;\n          var scopeTotal = 0;\n          for (var j = 0; j < _this.tickets.length; j++) {\n            var ticket = _this.tickets[j];\n            if (ticket.status === 'TERMINE') {\n              doneTotal += ticket.effort;\n            } else if (ticket.status === 'EN_ATTENTE') {\n              todoTotal += ticket.effort;\n            }\n            if (ticket.status !== 'TERMINE') {\n              scopeTotal += ticket.effort;\n            }\n          }\n          _this.doneData.push(doneTotal);\n          _this.todoData.push(todoTotal);\n          _this.scopeData.push(scopeTotal);\n        });\n      }\n    });\n    setTimeout(function () {\n      _this.createChart();\n    }, 2000);\n  };\n  CourbesComponent.prototype.createChart = function () {\n    var ctx = document.getElementById('burnUpChart');\n    // Déterminer la date de début et la date de fin du projet\n    var startDate = new Date(this.sprints[0].dateLancement);\n    var endDate = new Date(this.sprints[this.sprints.length - 1].dateFin);\n    // Générer une liste de dates entre la date de début et la date de fin\n    var dateLabels = [];\n    var currentDate = startDate;\n    while (currentDate <= endDate) {\n      dateLabels.push(currentDate.toISOString().substr(0, 10));\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    // Remplacer les labels de l'axe x par les dates générées\n    for (var i = 0; i < this.sprintLabels.length; i++) {\n      var sprint = this.sprints[i];\n      var sprintIndex = dateLabels.indexOf(sprint.dateFin.toISOString().substr(0, 10));\n      if (sprintIndex !== -1) {\n        this.sprintLabels[i] = dateLabels[sprintIndex];\n      }\n    }\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: this.sprintLabels,\n        datasets: [{\n          label: 'TERMINE',\n          data: this.doneData,\n          borderColor: 'green',\n          fill: false\n        }, {\n          label: 'EN_ATTENTE',\n          data: this.todoData,\n          borderColor: 'red',\n          fill: false\n        }, {\n          label: 'EN_COURS',\n          data: this.scopeData,\n          borderColor: 'blue',\n          fill: false\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'day',\n              displayFormats: {\n                day: 'DD/MM/YYYY'\n              },\n              tooltipFormat: 'DD/MM/YYYY'\n            },\n            ticks: {\n              autoSkip: true,\n              maxRotation: 45,\n              minRotation: 45,\n              maxTicksLimit: 10\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    viewQuery: function CourbesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartRef = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[2, \"position\", \"relative\", \"top\", \"30px\", \"height\", \"300px\"], [\"id\", \"burnUpChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}