{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // Appelez votre méthode de service pour récupérer les données des sprints\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      var e_1, _a;\n      _this.sprints = sprints;\n      try {\n        // Pour chaque sprint, appelez votre méthode de service pour récupérer les tickets d'histoire\n        for (var _b = __values(_this.sprints), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var sprint = _c.value;\n          _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (ticketHistoires) {\n            _this.ticketHistoires = _this.ticketHistoires.concat(ticketHistoires);\n            // Vérifiez si tous les tickets d'histoire ont été récupérés, puis créez le graphique\n            if (_this.ticketHistoires.length === _this.getTotalTicketsHistoire()) {\n              _this.createBurnUpChart();\n            }\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  };\n  CourbesComponent.prototype.getTotalTicketsHistoire = function () {\n    return this.sprints.reduce(function (total, sprint) {\n      return total + sprint.ticketsHistoire.length;\n    }, 0);\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 0,\n    vars: 0,\n    template: function CourbesComponent_Template(rf, ctx) {}\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}