{"ast":null,"code":"import { __decorate, __metadata, __param } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { Inject } from '@angular/core';\nimport { Sprint } from 'src/app/model/sprint';\nimport { ToastrService } from 'ngx-toastr';\nvar AjouterSprintFormComponent = /** @class */function () {\n  function AjouterSprintFormComponent(fb, sprintService, dialogRef, data, toastr) {\n    this.fb = fb;\n    this.sprintService = sprintService;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.toastr = toastr;\n    this.clickCount = 0;\n  }\n  AjouterSprintFormComponent.prototype.onNoClick = function () {\n    this.dialogRef.close();\n  };\n  AjouterSprintFormComponent.prototype.getProductBacklogByIdFromLocalStorage = function () {\n    var productBacklogCourantStr = localStorage.getItem(\"productBacklogCourant\");\n    var productBacklogCourantObj = JSON.parse(productBacklogCourantStr);\n    var id = productBacklogCourantObj.id;\n    console.log(\"id product backlog courant = \" + id);\n    return id;\n  };\n  AjouterSprintFormComponent.prototype.getListSprintsByProductBacklog = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n    });\n  };\n  // onSave(): void {\n  //   const productBacklogId = this.getProductBacklogByIdFromLocalStorage();\n  //   const sprint = new Sprint();\n  //   sprint.objectif = this.form.get('objectif').value;\n  //   sprint.dateLancement = new Date(this.form.get('dateLancement').value);\n  //   sprint.dateFin = new Date(this.form.get('dateFin').value);\n  //   const dateDebProjet = new Date(this.getProjetByIdFromLocalStorage().dateDebut);\n  //   const dateFinProjet = new Date(this.getProjetByIdFromLocalStorage().dateFin);\n  //   const conflit = this.sprints.some(existingSprint => {\n  //     const existingSprintDebut = new Date(existingSprint.dateLancement);\n  //     const existingSprintFin = new Date(existingSprint.dateFin);\n  //     return (sprint.dateLancement >= existingSprintDebut && sprint.dateLancement <= existingSprintFin) ||\n  //       (sprint.dateFin >= existingSprintDebut && sprint.dateFin <= existingSprintFin) ||\n  //       (existingSprintDebut >= sprint.dateLancement && existingSprintDebut <= sprint.dateFin) ||\n  //       (existingSprintFin >= sprint.dateLancement && existingSprintFin <= sprint.dateFin);\n  //   });\n  //   if (conflit) {\n  //     this.toastr.error('La période du sprint se chevauche avec un sprint existant.');\n  //     return;\n  //   }\n  //   if (sprint.dateLancement < dateDebProjet || sprint.dateFin > dateFinProjet) {\n  //     this.toastr.error('Le sprint ne se trouve pas dans la période du projet');\n  //     return;\n  //   }\n  //   if (this.sprints.length === 0) {\n  //     const diffTime = Math.abs(sprint.dateFin.getTime() - sprint.dateLancement.getTime());\n  //     const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  //     localStorage.setItem('firstSprintDuration', diffDays.toString());\n  //   }\n  //   this.sprintService.createSprint(sprint, productBacklogId).subscribe(\n  //     createdSprint => {\n  //       console.log(sprint);\n  //       console.log('Sprint créé avec succès :', createdSprint);\n  //       this.dialogRef.close(createdSprint);\n  //     },\n  //     error => {\n  //       console.error('Erreur lors de la création du sprint :', error);\n  //       this.toastr.error('Erreur lors de la création du sprint.');\n  AjouterSprintFormComponent.prototype.onSave = function () {\n    var _this = this;\n    var productBacklogId = this.getProductBacklogByIdFromLocalStorage();\n    var sprint = new Sprint();\n    sprint.objectif = this.form.get('objectif').value;\n    sprint.dateLancement = new Date(this.form.get('dateLancement').value);\n    sprint.dateFin = new Date(this.form.get('dateFin').value);\n    var dateDebProjet = new Date(this.getProjetByIdFromLocalStorage().dateDebut);\n    var dateFinProjet = new Date(this.getProjetByIdFromLocalStorage().dateFin);\n    var conflit = this.sprints.some(function (existingSprint) {\n      var existingSprintDebut = new Date(existingSprint.dateLancement);\n      var existingSprintFin = new Date(existingSprint.dateFin);\n      return sprint.dateLancement >= existingSprintDebut && sprint.dateLancement <= existingSprintFin || sprint.dateFin >= existingSprintDebut && sprint.dateFin <= existingSprintFin || existingSprintDebut >= sprint.dateLancement && existingSprintDebut <= sprint.dateFin || existingSprintFin >= sprint.dateLancement && existingSprintFin <= sprint.dateFin;\n    });\n    if (conflit) {\n      this.toastr.error('La période du sprint se chevauche avec un sprint existant.');\n      return;\n    }\n    if (sprint.dateLancement < dateDebProjet || sprint.dateFin > dateFinProjet) {\n      this.toastr.error('Le sprint ne se trouve pas dans la période du projet');\n      return;\n    }\n    if (this.sprints.length === 0) {\n      var diffTime = Math.abs(sprint.dateFin.getTime() - sprint.dateLancement.getTime());\n      var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      localStorage.setItem('sprintDuration', diffDays.toString());\n    } else {\n      var storedDuration = localStorage.getItem('sprintDuration');\n      var diffTime = Math.abs(sprint.dateFin.getTime() - sprint.dateLancement.getTime());\n      var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      if (diffDays !== parseInt(storedDuration)) {\n        this.toastr.error('La durée du sprint est différente de la durée enregistrée dans le localStorage.');\n        return;\n      }\n    }\n    sprint.productBacklogId = productBacklogId;\n    this.sprintService.createSprint(sprint, productBacklogId).subscribe(function (response) {\n      _this.toastr.success('Le sprint a été créé avec succès');\n      _this.dialogRef.close(response);\n    }, function (error) {\n      _this.toastr.error('Erreur lors de la création du sprint.');\n      console.error(error);\n    });\n  };\n  AjouterSprintFormComponent.prototype.move = function () {\n    this.clickCount++;\n  };\n  AjouterSprintFormComponent.prototype.validateDateFin = function (control) {\n    var _a;\n    var dateLancement = new Date((_a = control.parent) === null || _a === void 0 ? void 0 : _a.get('dateLancement').value);\n    var dateFin = new Date(control.value);\n    if (dateLancement && dateFin && dateLancement >= dateFin) {\n      return {\n        'dateFinInvalide': true\n      };\n    }\n    return null;\n  };\n  AjouterSprintFormComponent.prototype.dateSystemValidator = function () {\n    return function (control) {\n      var dateInput = new Date(control.value);\n      var dateSystem = new Date(Date.now());\n      if (dateInput.getTime() >= dateSystem.getTime()) {\n        return null;\n      } else {\n        return {\n          dateInvalid: true\n        };\n      }\n    };\n  };\n  AjouterSprintFormComponent.prototype.getProjetByIdFromLocalStorage = function () {\n    var projetCourantStr = localStorage.getItem(\"projetCourant\");\n    var projetCourantObj = JSON.parse(projetCourantStr);\n    console.log(projetCourantObj);\n    return projetCourantObj;\n  };\n  AjouterSprintFormComponent.prototype.ngOnInit = function () {\n    this.form = this.fb.group({\n      objectif: ['', Validators.required],\n      dateLancement: [new Date(), this.dateSystemValidator()],\n      dateFin: ['', this.validateDateFin.bind(this)]\n    });\n    this.getListSprintsByProductBacklog();\n  };\n  AjouterSprintFormComponent = __decorate([Component({\n    selector: 'app-ajouter-sprint-form',\n    templateUrl: './ajouter-sprint-form.component.html',\n    styleUrls: ['./ajouter-sprint-form.component.scss']\n  }), __param(3, Inject(MAT_DIALOG_DATA)), __metadata(\"design:paramtypes\", [FormBuilder, SprintService, MatDialogRef, Object, ToastrService])], AjouterSprintFormComponent);\n  return AjouterSprintFormComponent;\n}();\nexport { AjouterSprintFormComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}