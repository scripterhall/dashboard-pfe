{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport Chart from 'chart.js';\nimport { Sprint } from 'src/app/model/sprint';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService) {\n    this.sprintService = sprintService;\n    this.tickets = [{\n      id: 1,\n      idSprint: 1,\n      title: 'Ticket 1',\n      startDate: new Date('2023-04-01'),\n      endDate: new Date('2023-04-03'),\n      effort: 2\n    }, {\n      id: 2,\n      idSprint: 1,\n      title: 'Ticket 2',\n      startDate: new Date('2023-04-02'),\n      endDate: new Date('2023-04-05'),\n      effort: 3\n    }, {\n      id: 3,\n      idSprint: 2,\n      title: 'Ticket 3',\n      startDate: new Date('2023-04-03'),\n      endDate: new Date('2023-04-08'),\n      effort: 8\n    }, {\n      id: 4,\n      idSprint: 2,\n      title: 'Ticket 4',\n      startDate: new Date('2023-04-05'),\n      endDate: new Date('2023-04-11'),\n      effort: 13\n    }, {\n      id: 5,\n      idSprint: 3,\n      title: 'Ticket 5',\n      startDate: new Date('2023-04-05'),\n      endDate: new Date('2023-04-13'),\n      effort: 13\n    }];\n    this.charts = [];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // récupérer la liste de tous les sprints\n    var sprintIds = this.tickets.map(function (ticket) {\n      return ticket.idSprint;\n    });\n    var uniqueSprintIds = __spreadArray([], __read(new Set(sprintIds)), false);\n    this.sprints = uniqueSprintIds.map(function (sprintId) {\n      // filtrer les tickets correspondants à ce sprint\n      var sprintTickets = _this.tickets.filter(function (ticket) {\n        return ticket.idSprint === sprintId;\n      });\n      // générer la courbe pour ce sprint en utilisant les mêmes étapes que précédemment\n      var chart = new Chart(\"canvas-\".concat(sprintId), {\n        type: 'line',\n        data: {\n          labels: [],\n          datasets: [{\n            label: 'Effort restant',\n            data: [],\n            borderColor: 'blue',\n            fill: false\n          }, {\n            label: 'Tendance idéale',\n            data: _this.generateIdealTrend(sprintTickets),\n            borderColor: 'green',\n            fill: false\n          }]\n        },\n        options: {\n          title: {\n            display: true,\n            text: \"Burn Down Chart - Sprint \".concat(sprintId)\n          },\n          scales: {\n            xAxes: [{\n              type: 'time',\n              time: {\n                unit: 'day',\n                tooltipFormat: 'll'\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                beginAtZero: true,\n                stepSize: 1\n              }\n            }]\n          }\n        }\n      });\n      // ajouter la courbe au tableau des charts\n      _this.charts.push(chart);\n      // créer un objet sprint contenant l'id et le nom du sprint ainsi que le nombre de tickets qu'il contient\n      return {\n        id: sprintId,\n        name: Sprint,\n        $: $\n      };\n      {\n        sprintId;\n      }\n      ticketCount: sprintTickets.length;\n    });\n  };\n  CourbesComponent.prototype.generateIdealTrend = function (tickets) {\n    // calculer la somme totale des efforts\n    var totalEffort = tickets.reduce(function (sum, ticket) {\n      return sum + ticket.effort;\n    }, 0);\n    // calculer la moyenne d'effort par jour\n    var avgEffortPerDay = totalEffort / (tickets[tickets.length - 1].endDate - tickets[0].startDate) / (1000 * 60 * 60 * 24);\n    // générer un tableau contenant les dates et l'effort restant idéal pour chaque jour\n    var trend = [];\n    for (var i = 0; i < tickets.length; i++) {\n      var date = new Date(tickets[i].startDate.getTime() + i * (1000 * 60 * 60 * 24));\n      var idealEffort = tickets[0].effort - i * avgEffortPerDay;\n      trend.push({\n        x: date,\n        y: idealEffort\n      });\n    }\n    return trend;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"canvas\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 0);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}