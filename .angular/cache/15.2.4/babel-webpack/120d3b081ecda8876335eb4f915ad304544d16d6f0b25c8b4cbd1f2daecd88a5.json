{"ast":null,"code":"import { __read, __values } from \"tslib\";\nimport { MatDialog } from '@angular/material/dialog';\nimport { ChartDataSets, Chart } from 'chart.js';\nimport { forkJoin } from 'rxjs';\nimport { StatCourbComponent } from 'src/app/pages/dialogs/stat-courb/stat-courb.component';\nimport { RoleService } from 'src/app/service/role.service';\nimport { TicketTacheService } from 'src/app/service/ticket-tache.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/service/role.service\";\nimport * as i3 from \"src/app/service/ticket-tache.service\";\nvar HistoireMembreChartComponent = /** @class */function () {\n  function HistoireMembreChartComponent(dialog, roleService, ticketTacheService) {\n    this.dialog = dialog;\n    this.roleService = roleService;\n    this.ticketTacheService = ticketTacheService;\n    this.bubbleChartData = [];\n    this.colors = ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)'];\n    this.bubbleChartLegend = true;\n    this.bubbleChartPlugins = [];\n    this.listTicketHistoire = [];\n  }\n  HistoireMembreChartComponent.prototype.generateColors = function (numColors) {\n    var colors = [];\n    for (var i = 0; i < numColors; i++) {\n      var color = \"#\" + ((1 << 24) * Math.random() | 0).toString(16);\n      colors.push(color);\n    }\n    this.colors = colors;\n  };\n  HistoireMembreChartComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    var idProjet = JSON.parse(localStorage.getItem('projet')).id;\n    console.log(idProjet);\n    var ticketsObservable = this.ticketTacheService.getTicketsTacheBySprint(this.sprintId);\n    var roleObservable = this.roleService.afficherListRoleParProjet(idProjet);\n    // Utilisation de forkJoin pour attendre la récupération de toutes les données\n    forkJoin([roleObservable, ticketsObservable]).subscribe(function (_a) {\n      var e_1, _b;\n      var _c = __read(_a, 2),\n        roles = _c[0],\n        tickets = _c[1];\n      //recuoerer les membre par role\n      var membres = [];\n      console.log(roles);\n      _this.generateColors(roles.length);\n      try {\n        for (var roles_1 = __values(roles), roles_1_1 = roles_1.next(); !roles_1_1.done; roles_1_1 = roles_1.next()) {\n          var role = roles_1_1.value;\n          membres.push(role.membre);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (roles_1_1 && !roles_1_1.done && (_b = roles_1.return)) _b.call(roles_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      _this.listMembre = membres;\n      console.log(membres);\n      var bubbleChartData = [];\n      //ajouté dans le graphe \n      var membersAdded = [];\n      var historiesAdded = [];\n      var labels = [];\n      for (var i = 0; i < membres.length; i++) {\n        var memberData = {\n          data: [],\n          label: membres[i].email,\n          backgroundColor: _this.colors[i],\n          borderColor: _this.colors[i]\n        };\n        var _loop_1 = function (j) {\n          var tache = tickets[j];\n          if (tache && tache.membreId === membres[i].id) {\n            var historyIndex = historiesAdded.find(function (histoire) {\n              return histoire.id == tache.ht.id;\n            });\n            if (historyIndex == null) {\n              _this.listTicketHistoire.push(tache.ht);\n              historiesAdded.push(tache.ht);\n              memberData.data.push({\n                x: i,\n                y: tache.ht.id,\n                r: 10\n              });\n              labels.push(tache.ht.titre);\n            }\n            // } else {\n            //   // Histoire de ticket déjà présente, on ignore cette histoire de ticket et on passe à l'itération suivante\n            // }\n            else {\n              // Membre non présent, on l'ajoute au tableau des membres\n              membersAdded.push(membres[i].id);\n            }\n          }\n        };\n        for (var j = 0; j < tickets.length; j++) {\n          _loop_1(j);\n        }\n        bubbleChartData.push(memberData);\n        console.log(bubbleChartData);\n      }\n      //conf\n      var chartOptions = {\n        scales: {\n          yAxes: [{\n            max: 3,\n            scaleLabel: {\n              labelString: 'Histoire de ticket'\n            },\n            ticks: {\n              autoSkip: true,\n              beginAtZero: false,\n              stepsSize: 1,\n              label: labels\n            },\n            gridLines: {\n              display: true,\n              drawBorder: true,\n              color: 'rgba(200, 200, 200, 0.2)',\n              drawOnChartArea: true,\n              drawTicks: true\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Membre'\n            },\n            ticks: {\n              stepSize: 0,\n              beginAtZero: true,\n              min: 0,\n              max: membersAdded.length\n            },\n            gridLines: {\n              display: true,\n              drawBorder: true,\n              color: 'rgba(200, 200, 200, 0.2)',\n              drawOnChartArea: true,\n              drawTicks: true\n            }\n          }]\n        },\n        tooltips: {\n          callbacks: {\n            label: function (tooltipItem, data) {\n              var datasetLabel = data.datasets[tooltipItem.datasetIndex].label;\n              var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n              var memberName = membres[value.x].email;\n              var ticketTitle = historiesAdded.find(function (histoire) {\n                return histoire.id == value.y;\n              }).titre;\n              return \"\".concat(memberName, \": \").concat(ticketTitle);\n            }\n          }\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 10,\n            backgroundColor: '',\n            borderWidth: 0,\n            borderColor: 'transparent',\n            pointStyle: 'mat-icon',\n            icon: 'person',\n            fontColor: 'white',\n            fontSize: 20,\n            fontStyle: 'normal' // style de l'icône\n          }\n        },\n\n        onClick: _this.handleChartClick.bind(_this)\n      };\n      //creation \n      _this.canvas = document.getElementById(\"bubble-chart\");\n      _this.ctx = _this.canvas.getContext(\"2d\");\n      _this.chart = new Chart(_this.ctx, {\n        type: 'bubble',\n        data: {\n          datasets: bubbleChartData\n        },\n        options: chartOptions\n      });\n    });\n  };\n  HistoireMembreChartComponent.prototype.handleChartClick = function (event, array) {\n    var elements = this.chart.getElementAtEvent(event);\n    var member;\n    var ticketHistoire;\n    if (elements.length > 0) {\n      //pour l'axe des x \n      var datasetIndex = elements[0]._datasetIndex;\n      //pour l'axe des y\n      var dataIndexYaxe = elements[0]._index;\n      //affectation des valuer\n      member = this.listMembre[datasetIndex];\n      ticketHistoire = this.listTicketHistoire[dataIndexYaxe];\n    }\n    if (array.length > 0) {\n      var dialogRef = this.dialog.open(StatCourbComponent, {\n        width: '650px',\n        height: '570px',\n        data: {\n          membre: member,\n          histoire: ticketHistoire\n        }\n      });\n    }\n  };\n  HistoireMembreChartComponent.ɵfac = function HistoireMembreChartComponent_Factory(t) {\n    return new (t || HistoireMembreChartComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.RoleService), i0.ɵɵdirectiveInject(i3.TicketTacheService));\n  };\n  HistoireMembreChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HistoireMembreChartComponent,\n    selectors: [[\"app-histoire-membre-chart\"]],\n    inputs: {\n      sprintId: \"sprintId\"\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"chart-area\"], [\"width\", \"200\", \"height\", \"60\", \"id\", \"bubble-chart\"]],\n    template: function HistoireMembreChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return HistoireMembreChartComponent;\n}();\nexport { HistoireMembreChartComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}