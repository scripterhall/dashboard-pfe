{"ast":null,"code":"import { SprintService } from 'src/app/service/sprint.service';\nimport { Chart } from 'chart.js';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/service/sprint.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(http, sprintService) {\n    this.http = http;\n    this.sprintService = sprintService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(11).subscribe(function (data) {\n      _this.dateLancement = new Date(data.dateLancement);\n      _this.dateFin = new Date(data.dateFin);\n      _this.velocite = data.velocite;\n      _this.histoires = data.histoires;\n      // Calcul du nombre de jours du sprint\n      var nbJours = Math.ceil((_this.dateFin.getTime() - _this.dateLancement.getTime()) / (1000 * 3600 * 24));\n      // Initialisation des données pour le graphique\n      var labels = [];\n      var data = [];\n      var dataIdeal = [];\n      var effortTotal = _this.histoires.reduce(function (total, histoire) {\n        return total + histoire.effort;\n      }, 0);\n      var effortParJour = effortTotal / nbJours;\n      var effortRestant = effortTotal;\n      var _loop_1 = function (i) {\n        var date = new Date(_this.dateLancement);\n        date.setDate(date.getDate() + i);\n        labels.push(date.toLocaleDateString());\n        // Calcul de l'effort restant pour ce jour\n        effortRestant -= effortParJour;\n        _this.histoires.forEach(function (histoire) {\n          if (new Date(histoire.dateCreation).getTime() <= date.getTime() && !histoire.terminee) {\n            effortRestant -= histoire.effort;\n            histoire.terminee = true;\n          }\n        });\n        data.push(Math.max(0, effortRestant.toFixed(2)));\n        dataIdeal.push(Math.max(0, (effortTotal - i * effortParJour).toFixed(2)));\n      };\n      // Boucle sur chaque jour du sprint\n      for (var i = 0; i <= nbJours; i++) {\n        _loop_1(i);\n      }\n      // Création du graphique avec Chart.js\n      var chart = new Chart('canvas', {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Effort restant',\n            data: data,\n            borderColor: 'blue',\n            fill: false\n          }, {\n            label: 'Effort idéal',\n            data: dataIdeal,\n            borderColor: 'green',\n            borderDash: [5, 5],\n            fill: false\n          }]\n        },\n        options: {\n          legend: {\n            display: true\n          },\n          scales: {\n            xAxes: [{\n              display: true\n            }],\n            yAxes: [{\n              display: true,\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      });\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SprintService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"container\"], [\"id\", \"canvas\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}