{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.sprintTicketsMap = {}; // Map des tickets d'histoire pour chaque sprint\n  }\n\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()) // Remplacez 1 par l'ID de votre produit backlog\n    .subscribe(function (sprints) {\n      _this.sprints = sprints;\n      console.log(_this.sprints);\n      var _loop_1 = function (i) {\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprints[i].id) // Chargez les tickets d'histoire pour chaque sprint\n        .subscribe(function (ticketsHistoire) {\n          _this.sprintTicketsMap[sprints[i].id] = ticketsHistoire; // Stocker les tickets d'histoire pour chaque sprint dans un objet map\n          if (i == 0) {\n            // La première fois, créez le graphique pour le premier sprint\n            _this.ticketsHistoire = ticketsHistoire;\n            console.log(_this.ticketsHistoire);\n            _this.createBurnDownChart();\n          }\n        });\n      };\n      for (var i = 0; i < sprints.length; i++) {\n        _loop_1(i);\n      }\n    });\n  };\n  CourbesComponent.prototype.createBurnDownChart = function () {\n    var data = this.calculateBurnDownData(this.sprints[0].id); // Utilisez le premier sprint pour le moment\n    var ctx = document.getElementById('burnDownChart');\n    this.chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: 'Effort restant',\n          data: data.remainingEffort,\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1,\n          pointRadius: 0,\n          pointHitRadius: 10,\n          lineTension: 0\n        }, {\n          label: 'Effort idéal',\n          data: data.idealEffort,\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1,\n          pointRadius: 0,\n          pointHitRadius: 10,\n          lineTension: 0,\n          borderDash: [5, 5]\n        }]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Sprint'\n            }\n          }],\n          yAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Effort'\n            },\n            ticks: {\n              suggestedMin: 0,\n              suggestedMax: data.maxEffort\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.prototype.calculateBurnDownData = function (sprintId) {\n    var sprintTickets = this.sprintTicketsMap[sprintId]; // Obtenez les tickets d'histoire pour ce sprint à partir de la carte\n    var totalEffort = sprintTickets.reduce(function (sum, ticket) {\n      return sum + ticket.effortEstimation;\n    }, 0); // Calculer l'effort total à partir des tickets d'histoire\n    var startDate = new Date(this.sprints[0].startDate); // Utilisez la date de début du premier sprint pour l'instant\n    var endDate = new Date(this.sprints[this.sprints.length - 1].endDate); // Utilisez la date de fin du dernier sprint pour l'instant\n    var totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)); // Calculer le nombre de jours entre les dates de début et de fin\n    var remainingEffort = []; // Créez un tableau pour stocker les efforts restants pour chaque jour\n    var idealEffort = []; // Créez un tableau pour stocker les efforts idéaux pour chaque jour\n    var labels = []; // Créez un tableau pour stocker les étiquettes de date pour chaque jour\n    var remainingEffortPerDay = totalEffort / totalDays; // Calculer l'effort restant par jour pour atteindre zéro à la fin du sprint\n    var remainingEffortSoFar = totalEffort; // Définir l'effort restant jusqu'à présent sur l'effort total pour commencer\n    var date = startDate;\n    while (date <= endDate) {\n      // Boucle sur tous les jours entre la date de début et la date de fin\n      labels.push(date.toLocaleDateString()); // Ajouter la date à l'étiquette\n      var ticketEffort = 0;\n      for (var i = 0; i < sprintTickets.length; i++) {\n        // Bouclez sur tous les tickets d'histoire pour ce sprint\n        var ticket = sprintTickets[i];\n        var ticketDate = new Date(ticket.doneDate); // Obtenez la date d'achèvement du ticket\n        if (ticketDate.getTime() <= date.getTime()) {\n          // Vérifier si le ticket a été terminé avant la date actuelle\n          ticketEffort += ticket.effortEstimation; // Ajouter l'effort estimé du ticket terminé au total de l'effort effectué ce jour-là\n        }\n      }\n\n      remainingEffortSoFar -= ticketEffort; // Soustraire l'effort effectué ce jour-là de l'effort restant jusqu'à présent\n      remainingEffort.push(remainingEffortSoFar); // Ajouter l'effort restant à ce jour au tableau\n      var idealEffortSoFar = totalEffort - remainingEffortPerDay * labels.length; // Calculer l'effort idéal restant jusqu'à présent\n      idealEffort.push(idealEffortSoFar); // Ajouter l'effort idéal restant à ce jour au tableau\n      date = new Date(date.getTime() + 1000 * 60 * 60 * 24); // Ajouter un jour à la date actuelle\n    }\n\n    return {\n      labels: labels,\n      remainingEffort: remainingEffort,\n      idealEffort: idealEffort\n    };\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"chart-container\"], [\"id\", \"burnDownChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".chart[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 300px;\\n  right: 200px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}