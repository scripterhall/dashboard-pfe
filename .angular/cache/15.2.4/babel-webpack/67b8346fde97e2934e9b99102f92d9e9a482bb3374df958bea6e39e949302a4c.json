{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { Chart } from 'chart.js';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/histoire-ticket.service\";\nimport * as i3 from \"src/app/service/product-backlog.service\";\nimport * as i4 from \"@angular/common/http\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, ticketHistoireService, productBacklogService, http) {\n    this.sprintService = sprintService;\n    this.ticketHistoireService = ticketHistoireService;\n    this.productBacklogService = productBacklogService;\n    this.http = http;\n    this.sprints = [];\n    this.histoires = [];\n    this.sprintEffortEstime = 0;\n    this.sprintEffortActuel = 0;\n    this.sprintEffortEstimeData = [];\n    this.sprintEffortActuelData = [];\n    this.sprintLabels = [];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n      _this.ticketHistoireService.getHistoireTicketBySprintId(_this.sprints[_this.sprints.length - 1].id).subscribe(function (data) {\n        var e_1, _a;\n        _this.histoires = data;\n        console.log(_this.histoires);\n        try {\n          // Calcul de l'effort estimé total du sprint\n          for (var _b = __values(_this.histoires), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var histoire = _c.value;\n            _this.sprintEffortEstime += histoire.effort;\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n        _this.sprintEffortEstimeData.push(_this.sprintEffortEstime);\n        // Calcul de l'effort actuel total du sprint par jour\n        var sprintDateDebut = new Date(_this.sprints[_this.sprints.length - 1].dateLancement);\n        var sprintDateFin = new Date(_this.sprints[_this.sprints.length - 1].dateFin);\n        var sprintDuree = Math.ceil((sprintDateFin.getTime() - sprintDateDebut.getTime()) / (1000 * 3600 * 24)) + 1;\n        for (var i = 0; i < sprintDuree; i++) {\n          var effortRestant = _this.sprintEffortEstime;\n          var date = new Date(sprintDateDebut);\n          date.setDate(date.getDate() + i);\n          _this.sprintLabels.push(date.toISOString().slice(0, 10));\n          var joursRestants = sprintDuree - i;\n          var effortMoyenParJour = Math.round(effortRestant / joursRestants);\n          _this.sprintEffortActuelData.push(effortRestant - effortMoyenParJour * (sprintDuree - i));\n        }\n        // Affichage du burn down chart\n        var ctx = document.getElementById('myChart');\n        var myChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: _this.sprintLabels,\n            datasets: [{\n              label: 'Effort Estimé',\n              data: _this.sprintEffortEstimeData,\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 2,\n              fill: false\n            }, {\n              label: 'Effort Actuel',\n              data: _this.sprintEffortActuelData,\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 2,\n              fill: false\n            }]\n          },\n          options: {\n            scales: {\n              yAxes: [{\n                ticks: {\n                  beginAtZero: true\n                }\n              }]\n            }\n          }\n        });\n      });\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.HistoireTicketService), i0.ɵɵdirectiveInject(i3.ProductBacklogService), i0.ɵɵdirectiveInject(i4.HttpClient));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[2, \"width\", \"600px\"], [\"id\", \"myChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".courbe[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 50px;\\n  width: 800px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}