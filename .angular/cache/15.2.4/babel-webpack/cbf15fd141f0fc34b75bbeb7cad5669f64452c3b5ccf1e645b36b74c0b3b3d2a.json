{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import Chart from 'chart.js';\n// import { Sprint } from 'src/app/model/sprint';\n// import { SprintService } from 'src/app/service/sprint.service';\nimport { __decorate, __metadata } from \"tslib\";\n// @Component({\n//   selector: 'app-courbes',\n//   templateUrl: './courbes.component.html',\n//   styleUrls: ['./courbes.component.scss']\n// })\n// export class CourbesComponent implements OnInit {\n//   constructor(private sprintService:SprintService) { }\n//   sprints:Sprint[];\n//   sprint = {\n//     id: 1,\n//     velocity: 39, // vélocité de votre sprint\n//     startDate: new Date('2023-04-01'), // date de lancement de votre sprint\n//     endDate: new Date('2023-04-15') // date de fin de votre sprint\n//   };\n//   tickets = [\n//     {\n//       id: 1,\n//       title: 'Ticket 1',\n//       startDate: new Date('2023-04-01'), // date de début de ce ticket histoire\n//       endDate: new Date('2023-04-03'), // date de fin de ce ticket histoire\n//       effort: 2 // effort de ce ticket histoire\n//     },\n//     {\n//       id: 2,\n//       title: 'Ticket 2',\n//       startDate: new Date('2023-04-02'),\n//       endDate: new Date('2023-04-05'),\n//       effort: 3\n//     },\n//     {\n//       id: 3,\n//       title: 'Ticket 3',\n//       startDate: new Date('2023-04-03'),\n//       endDate: new Date('2023-04-08'),\n//       effort: 8\n//     },\n//     {\n//       id: 4,\n//       title: 'Ticket 4',\n//       startDate: new Date('2023-04-05'),\n//       endDate: new Date('2023-04-11'),\n//       effort: 13\n//     },\n//     {\n//       id: 5,\n//       title: 'Ticket 5',\n//       startDate: new Date('2023-04-05'),\n//       endDate: new Date('2023-04-13'),\n//       effort: 13\n//     }\n//   ];\n//   chart: Chart;\n//   ngOnInit() {\n//     this.chart = new Chart('canvas', {\n//       type: 'line',\n//       data: {\n//         labels: [], // les labels de l'axe X seront générés dynamiquement\n//         datasets: [\n//           {\n//             label: 'Effort restant',\n//             data: [], // les données seront générées dynamiquement\n//             borderColor: 'blue',\n//             fill: false\n//           },\n//           {\n//             label: 'Tendance idéale',\n//             data: this.generateIdealTrend(),\n//             borderColor: 'green',\n//             fill: false\n//           }\n//         ]\n//       },\n//       options: {\n//         title: {\n//           display: true,\n//           text: 'Burn Down Chart'\n//         },\n//         scales: {\n//           xAxes: [{\n//             type: 'time',\n//             time: {\n//               unit: 'day',\n//               tooltipFormat: 'll'\n//             }\n//           }],\n//           yAxes: [{\n//             ticks: {\n//               beginAtZero: true,\n//               stepSize: 1\n//             }\n//           }]\n//         }\n//       }\n//     });\n//     // génère les données pour l'axe X (dates) et pour l'axe Y (effort restant)\n//     const labels = [];\n//     const data = [];\n//     let remainingEffort = this.sprint.velocity;\n//     labels.push(this.sprint.startDate);\n//     data.push(remainingEffort);\n//     for (let i = 0; i < this.tickets.length; i++) {\n//       remainingEffort -= this.tickets[i].effort;\n//       labels.push(this.tickets[i].endDate);\n//       data.push(remainingEffort);\n//  }\n//     labels.push(this.sprint.endDate);\n//     data.push(0);\n//     this.chart.data.labels = labels;\n//     this.chart.data.datasets[0].data = data;\n//     this.chart.update();\n//     }\n//     // génère la tendance idéale (droite qui part de la vélocité à la date de lancement jusqu'à 0 à la date de fin)\n//     generateIdealTrend() {\n//     const idealTrend = [];\n//     idealTrend.push({x: this.sprint.startDate, y: this.sprint.velocity});\n//     idealTrend.push({x: this.sprint.endDate, y: 0});\n//     return idealTrend;\n//     }\n// }\nimport { Component } from '@angular/core';\nimport Chart from 'chart.js';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.sprint = {\n      id: 1,\n      velocity: 39,\n      startDate: new Date('2023-04-01'),\n      endDate: new Date('2023-04-15') // date de fin de votre sprint\n    };\n\n    this.tickets = [{\n      id: 1,\n      title: 'Ticket 1',\n      startDate: new Date('2023-04-01'),\n      endDate: new Date('2023-04-03'),\n      effort: 2 // effort de ce ticket histoire\n    }, {\n      id: 2,\n      title: 'Ticket 2',\n      startDate: new Date('2023-04-02'),\n      endDate: new Date('2023-04-05'),\n      effort: 3\n    }, {\n      id: 3,\n      title: 'Ticket 3',\n      startDate: new Date('2023-04-03'),\n      endDate: new Date('2023-04-08'),\n      effort: 8\n    }, {\n      id: 4,\n      title: 'Ticket 4',\n      startDate: new Date('2023-04-05'),\n      endDate: new Date('2023-04-11'),\n      effort: 13\n    }, {\n      id: 5,\n      title: 'Ticket 5',\n      startDate: new Date('2023-04-05'),\n      endDate: new Date('2023-04-13'),\n      effort: 13\n    }];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n      console.log(data);\n      _this.sprints.forEach(function (sprint) {\n        _this.sprintService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n          console.log(\"Tickets histoire pour le sprint \".concat(sprint.id, \": \"), tickets);\n        }, function (error) {\n          console.error(error);\n        });\n      });\n    }, function (error) {\n      console.error(error);\n    });\n    this.chart = new Chart('canvas', {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Effort restant',\n          data: [],\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'Tendance idéale',\n          data: this.generateIdealTrend(),\n          borderColor: 'green',\n          fill: false\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Burn Down Chart'\n        },\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'day',\n              tooltipFormat: 'll'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              stepSize: 1\n            }\n          }]\n        }\n      }\n    });\n    // génère les données pour l'axe X (dates) et pour l'axe Y (effort restant)\n    var labels = [];\n    var data = [];\n    var remainingEffort = this.sprint.velocity;\n    labels.push(this.sprint.startDate);\n    data.push(remainingEffort);\n    for (var i = 0; i < this.tickets.length; i++) {\n      remainingEffort -= this.tickets[i].effort;\n      labels.push(this.tickets[i].endDate);\n      data.push(remainingEffort);\n    }\n    labels.push(this.sprint.endDate);\n    data.push(0);\n    this.chart.data.labels = labels;\n    this.chart.data.datasets[0].data = data;\n    this.chart.update();\n  };\n  // génère la tendance idéale (droite qui part de la vélocité à la date de lancement jusqu'à 0 à la date de fin)\n  CourbesComponent.prototype.generateIdealTrend = function () {\n    var idealTrend = [];\n    idealTrend.push({\n      x: this.sprint.startDate,\n      y: this.sprint.velocity\n    });\n    idealTrend.push({\n      x: this.sprint.endDate,\n      y: 0\n    });\n    return idealTrend;\n  };\n  var _a;\n  CourbesComponent = __decorate([Component({\n    selector: 'app-courbes',\n    templateUrl: './courbes.component.html',\n    styleUrls: ['./courbes.component.scss']\n  }), __metadata(\"design:paramtypes\", [SprintService, ProductBacklogService, typeof (_a = typeof His !== \"undefined\" && His) === \"function\" ? _a : Object])], CourbesComponent);\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}