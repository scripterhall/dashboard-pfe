{"ast":null,"code":"import { __decorate, __metadata, __read, __spreadArray } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    this.loadSprints();\n    this.loadTicketsHistoire();\n  };\n  CourbesComponent.prototype.loadSprints = function () {\n    var _this = this;\n    var productBacklogId = 1; // mettre l'ID du Product Backlog ici\n    this.sprintService.getListSprintsByProductBacklog(productBacklogId).subscribe(function (sprints) {\n      _this.sprints = sprints;\n    });\n  };\n  CourbesComponent.prototype.loadTicketsHistoire = function () {\n    var _this = this;\n    this.ticketsHistoire = [];\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      sprints.forEach(function (sprint) {\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (ticketsHistoire) {\n          var _a;\n          (_a = _this.ticketsHistoire).push.apply(_a, __spreadArray([], __read(ticketsHistoire), false));\n        });\n      });\n    });\n  };\n  CourbesComponent.prototype.getEffortBySprint = function (sprintId) {\n    var effort = 0;\n    this.ticketsHistoire.forEach(function (ticketHistoire) {\n      if (ticketHistoire.sprintId === sprintId) {\n        effort += ticketHistoire.effort;\n      }\n    });\n    return effort;\n  };\n  CourbesComponent.prototype.getSprintData = function () {\n    var _this = this;\n    var sprintData = {\n      labels: [],\n      data: []\n    };\n    this.sprints.forEach(function (sprint) {\n      sprintData.labels.push(\"Sprint \".concat(sprint.id));\n      sprintData.data.push(_this.getEffortBySprint(sprint.id));\n    });\n    return sprintData;\n  };\n  CourbesComponent = __decorate([Component({\n    selector: 'app-courbes',\n    templateUrl: './courbes.component.html',\n    styleUrls: ['./courbes.component.scss']\n  }), __metadata(\"design:paramtypes\", [SprintService, ProductBacklogService, HistoireTicketService, ProjetServiceService])], CourbesComponent);\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}