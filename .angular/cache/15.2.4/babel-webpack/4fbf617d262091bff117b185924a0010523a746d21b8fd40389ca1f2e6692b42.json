{"ast":null,"code":"import { __values } from \"tslib\";\nimport Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.sprintsData = []; // tableau pour stocker les données de chaque sprint\n    this.charts = []; // tableau pour stocker les graphiques\n  }\n\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      console.log(_this.sprints);\n      var _loop_1 = function (i) {\n        var sprint = _this.sprints[i];\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (ticketsHistoire) {\n          _this.sprintsData[i] = {\n            sprint: sprint,\n            ticketsHistoire: ticketsHistoire\n          };\n          console.log('Données pour sprint ' + sprint.id + ' chargées :', _this.sprintsData[i]);\n          if (_this.sprintsData.length == _this.sprints.length) {\n            _this.createBurnDownCharts();\n          }\n        });\n      };\n      for (var i = 0; i < _this.sprints.length; i++) {\n        _loop_1(i);\n      }\n    });\n  };\n  CourbesComponent.prototype.createBurnDownChart = function (sprint, ticketsHistoire) {\n    var data = this.calculateBurnDownData(sprint, ticketsHistoire);\n    var ctx = document.getElementById('burnDownChart-' + sprint.id);\n    this.chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: 'Effort restant',\n          data: data.remainingEffort,\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1,\n          pointRadius: 0,\n          pointHitRadius: 10,\n          lineTension: 0\n        }, {\n          label: 'Effort idéal',\n          data: data.idealEffort,\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1,\n          pointRadius: 0,\n          pointHitRadius: 10,\n          lineTension: 0,\n          borderDash: [5, 5]\n        }]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'day',\n              displayFormats: {\n                day: 'MMM D'\n              }\n            },\n            ticks: {\n              source: 'labels'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              min: 0,\n              stepSize: 10\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.prototype.calculateBurnDownData = function (sprint, ticketsHistoire) {\n    var e_1, _a;\n    var startDate = new Date(sprint.dateLancement);\n    var endDate = new Date(sprint.dateFin);\n    var idealEffort = [];\n    var remainingEffort = [];\n    var labels = [];\n    // Calculez l'effort idéal\n    var totalEffort = 0;\n    var remainingDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    var dailyEffort = sprint.velocite / remainingDays;\n    for (var i = 0; i <= remainingDays; i++) {\n      idealEffort.push(totalEffort);\n      totalEffort += dailyEffort;\n    }\n    // Calculez l'effort restant pour chaque jour\n    var remainingEffortToday = totalEffort;\n    for (var i = 0; i < remainingDays; i++) {\n      var date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n      labels.push(date);\n      var totalEffortToday = 0;\n      try {\n        for (var ticketsHistoire_1 = (e_1 = void 0, __values(ticketsHistoire)), ticketsHistoire_1_1 = ticketsHistoire_1.next(); !ticketsHistoire_1_1.done; ticketsHistoire_1_1 = ticketsHistoire_1.next()) {\n          var ticket = ticketsHistoire_1_1.value;\n          if (new Date(ticket.dateFin) <= date) {\n            totalEffortToday += ticket.effort;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (ticketsHistoire_1_1 && !ticketsHistoire_1_1.done && (_a = ticketsHistoire_1.return)) _a.call(ticketsHistoire_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      remainingEffortToday -= totalEffortToday;\n      remainingEffort.push(remainingEffortToday);\n    }\n    return {\n      labels: labels,\n      idealEffort: idealEffort,\n      remainingEffort: remainingEffort\n    };\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"chart-container\"], [\"id\", \"burnDownChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".chart[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 300px;\\n  right: 200px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}