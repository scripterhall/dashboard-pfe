{"ast":null,"code":"import Chart from 'chart.js';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService) {\n    this.sprintService = sprintService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // récupérer la liste des sprints depuis le service\n    this.sprintService.getSprints().subscribe(function (sprints) {\n      _this.sprints = sprints;\n      // pour chaque sprint, récupérer la liste des tickets correspondants\n      var sprintTickets = _this.sprints.map(function (sprint) {\n        return {\n          id: sprint.id,\n          tickets: _this.tickets.filter(function (ticket) {\n            return ticket.idSprint === sprint.id;\n          })\n        };\n      });\n      // afficher la liste des sprints et de leurs tickets dans la console pour vérification\n      console.log(sprintTickets);\n      // générer le chart Burn Down pour chaque sprint\n      sprintTickets.forEach(function (sprintTicket) {\n        _this.generateBurnDownChart(sprintTicket);\n      });\n    });\n  };\n  CourbesComponent.prototype.generateBurnDownChart = function (sprintTicket) {\n    var sprint = this.sprints.find(function (s) {\n      return s.id === sprintTicket.id;\n    });\n    var tickets = sprintTicket.tickets;\n    this.chart = new Chart('canvas' + sprint.id, {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Effort restant',\n          data: [],\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'Tendance idéale',\n          data: this.generateIdealTrend(sprint),\n          borderColor: 'green',\n          fill: false\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Burn Down Chart - Sprint ' + sprint.id\n        },\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'day',\n              tooltipFormat: 'll'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              stepSize: 1\n            }\n          }]\n        }\n      }\n    });\n    // génère les données pour l'axe X (dates) et pour l'axe Y (effort restant)\n    var labels = [];\n    var data = [];\n    var remainingEffort = sprint.velocity;\n    labels.push(sprint.startDate);\n    data.push(remainingEffort);\n    for (var i = 0; i < tickets.length; i++) {\n      remainingEffort -= tickets[i].effort;\n      labels.push(tickets[i].endDate);\n      data.push(remainingEffort);\n    }\n    labels.push(sprint.endDate);\n    data.push(0);\n    this.chart.data.labels = labels;\n    this.chart.data.datasets[0].data = data;\n    this.chart.update();\n  };\n  // génère la tendance idéale (droite qui part de la vélocité à la date de lancement jusqu'à 0 à la date de fin)\n  CourbesComponent.prototype.generateIdealTrend = function (sprint) {\n    var idealTrend = [];\n    idealTrend.push({\n      x: sprint.startDate\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"canvas\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 0);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}