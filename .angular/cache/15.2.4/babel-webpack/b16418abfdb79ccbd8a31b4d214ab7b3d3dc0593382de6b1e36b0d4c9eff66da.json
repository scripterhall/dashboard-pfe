{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    // génère les données pour l'axe X (dates) et pour l'axe Y (effort restant)\n    this.labels = [];\n    this.data = [];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n      console.log(data);\n    }, function (error) {\n      console.error(error);\n    });\n    // initialise le graphique avec le premier sprint de la liste\n    this.selectedSprint = this.sprints[0];\n    this.updateChart(this.selectedSprint);\n  };\n  // méthode pour mettre à jour le graphique avec les données du sprint spécifié\n  CourbesComponent.prototype.updateChart = function (sprint) {\n    this.chart = new Chart('canvas', {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Effort restant',\n          data: [],\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'Tendance idéale',\n          data: this.generateIdealTrend(sprint),\n          borderColor: 'green',\n          fill: false\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Burn Down Chart'\n        },\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'day',\n              tooltipFormat: 'll'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              stepSize: 1\n            }\n          }]\n        }\n      }\n    });\n    // récupère les tickets du sprint sélectionné\n    var tickets = sprint.tickets;\n    this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n      console.log(\"Tickets histoire pour le sprint \".concat(sprint.id, \": \"), tickets);\n      ticketsArray.push(tickets); // ajout des tickets au tableau\n    }, function (error) {\n      console.error(error);\n    });\n  };\n  ;\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 0,\n    vars: 0,\n    template: function CourbesComponent_Template(rf, ctx) {}\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };\nvar remainingEffort = sprint.velocity;\nlabels.push(sprint.startDate);\ndata.push(remainingEffort);\nfor (var i = 0; i < tickets.length; i++) {\n  remainingEffort -= tickets[i].effort;\n  labels.push(tickets[i].endDate);\n  data.push(remainingEffort);\n}\nlabels.push(sprint.endDate);\ndata.push(0);\nthis.chart.data.labels = labels;\nthis.chart.data.datasets[0].data = data;\nthis.chart.update();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}