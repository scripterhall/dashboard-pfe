{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ToastrService } from 'ngx-toastr';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { TicketTacheService } from 'src/app/service/ticket-tache.service';\nimport Sortable from 'sortablejs';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"src/app/service/ticket-tache.service\";\nimport * as i3 from \"src/app/service/product-backlog.service\";\nimport * as i4 from \"src/app/service/sprint.service\";\nimport * as i5 from \"@angular/common/http\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@ng-bootstrap/ng-bootstrap\";\nfunction ScrumBoardComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var sprint_r2 = ctx.$implicit;\n    var i_r3 = ctx.index;\n    i0.ɵɵproperty(\"value\", sprint_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", \"Sprint \" + (i_r3 + 1), \" \", sprint_r2.etat, \" \");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_7_ngb_alert_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngb-alert\", 24);\n    i0.ɵɵlistener(\"drop\", function ScrumBoardComponent_div_5_span_7_ngb_alert_1_Template_ngb_alert_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var tache_r8 = i0.ɵɵnextContext().$implicit;\n      var ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onDrop($event, tache_r8));\n    });\n    i0.ɵɵelementStart(1, \"span\")(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    var tache_r8 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", \"info\")(\"dismissible\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", tache_r8.titre, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" De \", i0.ɵɵpipeBind1(5, 5, tache_r8.dateLancement), \" \\u00E0 \", i0.ɵɵpipeBind1(6, 7, tache_r8.dateFin), \" \");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtemplate(1, ScrumBoardComponent_div_5_span_7_ngb_alert_1_Template, 7, 9, \"ngb-alert\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var tache_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"draggable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tache_r8.etat === \"\\u00E0 faire\");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_14_ngb_alert_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngb-alert\", 24);\n    i0.ɵɵlistener(\"drop\", function ScrumBoardComponent_div_5_span_14_ngb_alert_1_Template_ngb_alert_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      var tache_r14 = i0.ɵɵnextContext().$implicit;\n      var ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onDrop($event, tache_r14));\n    });\n    i0.ɵɵelementStart(1, \"span\")(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    var tache_r14 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", \"primary\")(\"dismissible\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", tache_r14.titre, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" De \", i0.ɵɵpipeBind1(5, 5, tache_r14.dateLancement), \" \\u00E0 \", i0.ɵɵpipeBind1(6, 7, tache_r14.dateFin), \" \");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtemplate(1, ScrumBoardComponent_div_5_span_14_ngb_alert_1_Template, 7, 9, \"ngb-alert\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var tache_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"draggable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tache_r14.etat === \"en cours\");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_21_ngb_alert_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngb-alert\", 24);\n    i0.ɵɵlistener(\"drop\", function ScrumBoardComponent_div_5_span_21_ngb_alert_1_Template_ngb_alert_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      var tache_r20 = i0.ɵɵnextContext().$implicit;\n      var ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDrop($event, tache_r20));\n    });\n    i0.ɵɵelementStart(1, \"span\")(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    var tache_r20 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", \"primary\")(\"dismissible\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", tache_r20.titre, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" De \", i0.ɵɵpipeBind1(5, 5, tache_r20.dateLancement), \" \\u00E0 \", i0.ɵɵpipeBind1(6, 7, tache_r20.dateFin), \" \");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtemplate(1, ScrumBoardComponent_div_5_span_21_ngb_alert_1_Template, 7, 9, \"ngb-alert\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var tache_r20 = ctx.$implicit;\n    i0.ɵɵproperty(\"draggable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tache_r20.etat === \"termin\\u00E9\");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_31_ngb_alert_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngb-alert\", 24);\n    i0.ɵɵlistener(\"drop\", function ScrumBoardComponent_div_5_span_31_ngb_alert_1_Template_ngb_alert_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      var tache_r26 = i0.ɵɵnextContext().$implicit;\n      var ctx_r28 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r28.onDrop($event, tache_r26));\n    });\n    i0.ɵɵelementStart(1, \"span\")(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    var tache_r26 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", \"primary\")(\"dismissible\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", tache_r26.titre, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" De \", i0.ɵɵpipeBind1(5, 5, tache_r26.dateLancement), \" \\u00E0 \", i0.ɵɵpipeBind1(6, 7, tache_r26.dateFin), \" \");\n  }\n}\nfunction ScrumBoardComponent_div_5_span_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtemplate(1, ScrumBoardComponent_div_5_span_31_ngb_alert_1_Template, 7, 9, \"ngb-alert\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var tache_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"draggable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tache_r26.etat === \"\\u00E0 v\\u00E9rifier\");\n  }\n}\nfunction ScrumBoardComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7)(2, \"div\", 8)(3, \"div\", 9)(4, \"h4\", 10);\n    i0.ɵɵtext(5, \"A faire\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 11);\n    i0.ɵɵtemplate(7, ScrumBoardComponent_div_5_span_7_Template, 2, 2, \"span\", 12);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"div\", 13)(9, \"div\", 8)(10, \"div\", 9)(11, \"h4\", 10);\n    i0.ɵɵtext(12, \"En cours\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"div\", 14);\n    i0.ɵɵtemplate(14, ScrumBoardComponent_div_5_span_14_Template, 2, 2, \"span\", 12);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(15, \"div\", 15)(16, \"div\", 8)(17, \"div\", 9)(18, \"h4\", 10);\n    i0.ɵɵtext(19, \"Termin\\u00E9\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(20, \"div\", 16);\n    i0.ɵɵtemplate(21, ScrumBoardComponent_div_5_span_21_Template, 2, 2, \"span\", 12);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(22, \"div\", 17)(23, \"div\", 8)(24, \"div\", 18)(25, \"div\", 19)(26, \"div\", 6)(27, \"div\", 20)(28, \"h4\", 10);\n    i0.ɵɵtext(29, \"A verifier\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(30, \"div\", 21);\n    i0.ɵɵtemplate(31, ScrumBoardComponent_div_5_span_31_Template, 2, 2, \"span\", 12);\n    i0.ɵɵelementEnd()()()()()();\n  }\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.ticketsTache);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.ticketsTache);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.ticketsTache);\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.ticketsTache);\n  }\n}\nvar ScrumBoardComponent = /** @class */function () {\n  function ScrumBoardComponent(toastr, ticketTacheService, productBacklogService, sprintService, http) {\n    this.toastr = toastr;\n    this.ticketTacheService = ticketTacheService;\n    this.productBacklogService = productBacklogService;\n    this.sprintService = sprintService;\n    this.http = http;\n    this.staticAlertClosed = false;\n    this.staticAlertClosed1 = false;\n    this.staticAlertClosed2 = false;\n    this.staticAlertClosed3 = false;\n    this.staticAlertClosed4 = false;\n    this.staticAlertClosed5 = false;\n    this.staticAlertClosed6 = false;\n    this.staticAlertClosed7 = false;\n    this.ticketsTache = [];\n    this.movedElementId = '';\n  }\n  ScrumBoardComponent.prototype.showNotification = function (from, align) {\n    var color = Math.floor(Math.random() * 5 + 1);\n    switch (color) {\n      case 1:\n        this.toastr.info('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-info alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 2:\n        this.toastr.success('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-success alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 3:\n        this.toastr.warning('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-warning alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 4:\n        this.toastr.error('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          enableHtml: true,\n          closeButton: true,\n          toastClass: \"alert alert-danger alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 5:\n        this.toastr.show('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-primary alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  ScrumBoardComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n    });\n  };\n  ScrumBoardComponent.prototype.getTicketsTacheBySprint = function (sprintId) {\n    var _this = this;\n    if (sprintId) {\n      this.ticketTacheService.getTicketsTacheBySprint(sprintId).subscribe(function (tickets) {\n        _this.ticketsTache = tickets;\n        console.log(_this.ticketsTache);\n      });\n    } else {\n      this.ticketsTache = null;\n    }\n  };\n  // ngAfterViewInit() {\n  //   const cardBodies = document.querySelectorAll('.card-body');\n  //   const myArray = Array.from(cardBodies);\n  //   for (const body of myArray) {\n  //     const sortable = new Sortable(body, {\n  //       group: 'shared',\n  //       animation: 150,\n  //       onEnd: (evt) => {\n  //         console.log('Moved item', evt.item, 'from index', evt.oldIndex, 'to index', evt.newIndex);\n  //         const targetId = evt.to.id;\n  //         this.etat=String(targetId);\n  //         console.log('Target element ID:', targetId);\n  //       }\n  //     });\n  //   }\n  // }\n  // onDrop(event: DragEvent, ticketTache: TacheTicket) {\n  //   console.log(\"Etattttt= \"+this.etat);\n  //   ticketTache.etat=this.etat;\n  //   const targetElement = event.currentTarget as HTMLElement;\n  //   console.log('Item dropped on element with ID:', targetElement.id);\n  //   this.ticketTacheService.modifierTicketTache(ticketTache)\n  //     .subscribe(\n  //       (modifiedTicket: TacheTicket) => {\n  //         console.log('Ticket modifié :', modifiedTicket);\n  //       },\n  //       (error) => {\n  //         console.error('Erreur lors de la modification du ticket :', error);\n  //       }\n  //     );\n  // }\n  ScrumBoardComponent.prototype.ngAfterViewInit = function () {\n    var e_1, _a;\n    var cardBodies = document.querySelectorAll('.card-body');\n    var myArray = Array.from(cardBodies);\n    try {\n      for (var myArray_1 = __values(myArray), myArray_1_1 = myArray_1.next(); !myArray_1_1.done; myArray_1_1 = myArray_1.next()) {\n        var body = myArray_1_1.value;\n        var sortable = new Sortable(body, {\n          group: 'shared',\n          animation: 150,\n          onEnd: function (evt) {\n            console.log('Moved item', evt.item, 'from index', evt.oldIndex, 'to index', evt.newIndex);\n            var targetId = evt.to.id;\n            console.log('Target element ID:', targetId);\n          }\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (myArray_1_1 && !myArray_1_1.done && (_a = myArray_1.return)) _a.call(myArray_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  ScrumBoardComponent.prototype.onDrop = function (event, ticketTache) {\n    var e_2, _a;\n    var targetElement = event.currentTarget;\n    console.log('Item dropped on element with ID:', targetElement.id);\n    var myArray = Array.from(cardBodies);\n    try {\n      for (var myArray_2 = __values(myArray), myArray_2_1 = myArray_2.next(); !myArray_2_1.done; myArray_2_1 = myArray_2.next()) {\n        var body = myArray_2_1.value;\n        var sortable = new Sortable(body, {\n          group: 'shared',\n          animation: 150,\n          onEnd: function (evt) {\n            console.log('Moved item', evt.item, 'from index', evt.oldIndex, 'to index', evt.newIndex);\n            var targetId = evt.to.id;\n            console.log('Target element ID:', targetId);\n          }\n        });\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (myArray_2_1 && !myArray_2_1.done && (_a = myArray_2.return)) _a.call(myArray_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  ScrumBoardComponent.ɵfac = function ScrumBoardComponent_Factory(t) {\n    return new (t || ScrumBoardComponent)(i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i2.TicketTacheService), i0.ɵɵdirectiveInject(i3.ProductBacklogService), i0.ɵɵdirectiveInject(i4.SprintService), i0.ɵɵdirectiveInject(i5.HttpClient));\n  };\n  ScrumBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ScrumBoardComponent,\n    selectors: [[\"app-scrum-board\"]],\n    decls: 6,\n    vars: 2,\n    consts: [[1, \"content\"], [3, \"change\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"row\", 4, \"ngIf\"], [3, \"value\"], [1, \"row\"], [1, \"col-md-4\", \"vh-100\", \"d-flex\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [\"id\", \"\\u00E0 faire\", 1, \"card-body\", 2, \"overflow-y\", \"auto\", \"max-height\", \"700px\"], [3, \"draggable\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-4\", 2, \"overflow-y\", \"auto\"], [\"id\", \"en cours\", 1, \"card-body\", 2, \"overflow-y\", \"auto\", \"max-height\", \"500px\"], [1, \"col-md-4\"], [\"id\", \"termin\\u00E9\", 1, \"card-body\", 2, \"overflow-y\", \"auto\", \"max-height\", \"454px\"], [1, \"col-md-8\", \"offset-md-4\", 2, \"margin-top\", \"-19%\"], [1, \"card-body\", 2, \"overflow-x\", \"auto\", \"max-width\", \"100%\"], [1, \"places-buttons\"], [1, \"col-md-6\", \"ml-auto\", \"mr-auto\", \"text-center\"], [\"id\", \"\\u00E0 v\\u00E9rifier\", 1, \"card-body\", 2, \"overflow-y\", \"auto\", \"max-height\", \"454px\"], [3, \"draggable\"], [3, \"type\", \"dismissible\", \"drop\", 4, \"ngIf\"], [3, \"type\", \"dismissible\", \"drop\"]],\n    template: function ScrumBoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"select\", 1);\n        i0.ɵɵlistener(\"change\", function ScrumBoardComponent_Template_select_change_1_listener($event) {\n          return ctx.getTicketsTacheBySprint($event.target.value);\n        });\n        i0.ɵɵelementStart(2, \"option\", 2);\n        i0.ɵɵtext(3, \"-- S\\u00E9lectionner un sprint --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, ScrumBoardComponent_option_4_Template, 2, 3, \"option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, ScrumBoardComponent_div_5_Template, 32, 4, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sprints);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.ticketsTache);\n      }\n    },\n    dependencies: [i6.NgForOf, i6.NgIf, i7.NgSelectOption, i7.ɵNgSelectMultipleOption, i8.NgbAlert, i6.DatePipe],\n    styles: [\".scrum-board[_ngcontent-%COMP%] {\\n  display: flex;\\n  height: 100%;\\n  width: 100%;\\n  background-color: #121212;\\n}\\n\\n.scrum-column[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 33.3%;\\n  height: 100%;\\n}\\n\\n.scrum-column[_ngcontent-%COMP%]   mat-toolbar[_ngcontent-%COMP%] {\\n  height: 64px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\n.column-title[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  font-weight: bold;\\n  margin-left: 8px;\\n  color: #fff;\\n}\\n\\n.drag-handle[_ngcontent-%COMP%] {\\n  cursor: move;\\n  color: #fff;\\n}\\n\\n.scrum-list[_ngcontent-%COMP%] {\\n  padding: 8px;\\n  overflow-y: auto;\\n  flex-grow: 1;\\n  background-color: #1f1f1f;\\n  border-radius: 8px;\\n}\\n\\n.scrum-item[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  padding: 8px;\\n  margin-bottom: 8px;\\n  background-color: #292929;\\n  border-radius: 8px;\\n}\\n\\n.scrum-content[_ngcontent-%COMP%] {\\n  margin-left: 8px;\\n  color: #fff;\\n}\\n\\n.scrum-content[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 16px;\\n  font-weight: bold;\\n}\\n\\n.scrum-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 14px;\\n}\\n\\n.card-body.drop-zone[_ngcontent-%COMP%] {\\n  min-height: 100px;\\n  background-color: #f5f5f5;\\n}\\n\\n.drag-handle[_ngcontent-%COMP%] {\\n  cursor: move;\\n}\"]\n  });\n  return ScrumBoardComponent;\n}();\nexport { ScrumBoardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}