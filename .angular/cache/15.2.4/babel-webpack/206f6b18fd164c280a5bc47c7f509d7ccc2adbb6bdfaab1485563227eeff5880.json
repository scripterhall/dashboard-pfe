{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.sprints = [{\n      id: 1,\n      velocity: 20,\n      startDate: new Date('2022-01-01'),\n      endDate: new Date('2022-01-14')\n    }, {\n      id: 2,\n      velocity: 25,\n      startDate: new Date('2022-01-15'),\n      endDate: new Date('2022-01-28')\n    }, {\n      id: 3,\n      velocity: 30,\n      startDate: new Date('2022-01-29'),\n      endDate: new Date('2022-02-11')\n    }];\n    this.tickets = [{\n      id: 1,\n      sprintId: 1,\n      effort: 10,\n      startDate: new Date('2022-01-01'),\n      endDate: new Date('2022-01-05')\n    }, {\n      id: 2,\n      sprintId: 1,\n      effort: 5,\n      startDate: new Date('2022-01-02'),\n      endDate: new Date('2022-01-07')\n    }, {\n      id: 3,\n      sprintId: 2,\n      effort: 12,\n      startDate: new Date('2022-01-17'),\n      endDate: new Date('2022-01-23')\n    }, {\n      id: 4,\n      sprintId: 3,\n      effort: 20,\n      startDate: new Date('2022-01-30'),\n      endDate: new Date('2022-02-06')\n    }, {\n      id: 5,\n      sprintId: 3,\n      effort: 10,\n      startDate: new Date('2022-02-01'),\n      endDate: new Date('2022-02-04')\n    }];\n    this.datasets = [{\n      label: 'Ideal Burn Up',\n      data: this.calculateIdealBurnUp(),\n      fill: false,\n      borderColor: '#888',\n      pointRadius: 0\n    }, {\n      label: 'Actual Burn Up',\n      data: this.calculateActualBurnUp(),\n      fill: false,\n      borderColor: '#33a',\n      pointRadius: 3\n    }];\n    this.labels = this.calculateLabels();\n    this.options = {\n      responsive: true,\n      scales: {\n        x: {\n          type: 'time',\n          time: {\n            unit: 'week',\n            displayFormats: {\n              week: 'MMM D'\n            }\n          },\n          title: {\n            display: true,\n            text: 'Date'\n          }\n        },\n        y: {\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Effort (points)'\n          }\n        }\n      },\n      colors: colors\n    };\n  }\n  CourbesComponent.prototype.calculateIdealBurnUp = function () {\n    var e_1, _a;\n    var totalEffort = 0;\n    var idealBurnUp = [];\n    try {\n      for (var _b = __values(this.sprints), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sprint = _c.value;\n        totalEffort += sprint.velocity;\n        idealBurnUp.push({\n          x: sprint.endDate,\n          y: totalEffort\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return idealBurnUp;\n  };\n  CourbesComponent.prototype.calculateActualBurnUp = function () {\n    var e_2, _a, e_3, _b;\n    var totalEffort = 0;\n    var actualBurnUp = [];\n    try {\n      for (var _c = __values(this.sprints), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var sprint = _d.value;\n        var sprintEffort = 0;\n        try {\n          for (var _e = (e_3 = void 0, __values(this.tickets)), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var ticket = _f.value;\n            if (ticket.sprintId === sprint.id) {\n              sprintEffort += ticket.effort;\n            }\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n        totalEffort += sprintEffort;\n        actualBurnUp.push({\n          x: sprint.endDate,\n          y: totalEffort\n        });\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return actualBurnUp;\n  };\n  CourbesComponent.prototype.calculateLabels = function () {\n    var e_4, _a;\n    var labels = [];\n    try {\n      for (var _b = __values(this.sprints), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sprint = _c.value;\n        labels.push(sprint.startDate.toISOString());\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    labels.push(this.sprints[this.sprints.length - 1].endDate.toISOString());\n    return labels;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 0,\n    vars: 0,\n    template: function CourbesComponent_Template(rf, ctx) {}\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}