{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import Chart from 'chart.js';\n// import { Sprint } from 'src/app/model/sprint';\n// import { TicketHistoire } from 'src/app/model/ticket-histoire';\n// import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\n// import { ProductBacklogService } from 'src/app/service/product-backlog.service';\n// import { SprintService } from 'src/app/service/sprint.service';\n// @Component({\n//   selector: 'app-courbes',\n//   templateUrl: './courbes.component.html',\n//   styleUrls: ['./courbes.component.scss']\n// })\n// export class CourbesComponent implements OnInit {\n//   constructor(private sprintService:SprintService,\n//     private productBacklogService:ProductBacklogService,\n//     private histoireTicketService:HistoireTicketService) { }\n//     sprints:Sprint[];\n//     selectedSprint:Sprint; // nouvelle variable pour stocker le sprint sélectionné\n//     tickets: TicketHistoire[];\n//     // le reste du code est inchangé\n//     chart: Chart;\n//   ngOnInit() {\n//     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(\n//       data => {\n//         this.sprints = data ;\n//         console.log(data);\n//       },\n//       error => {\n//         console.error(error);\n//       }\n//     );\n//     // initialise le graphique avec le premier sprint de la liste\n//     this.selectedSprint = this.sprints[0];\n//     this.updateChart(this.selectedSprint);\n// }\n//   // méthode pour mettre à jour le graphique avec les données du sprint spécifié\n//   updateChart(sprint:Sprint) {\n//     this.chart = new Chart('canvas', {\n//       type: 'line',\n//       data: {\n//         labels: [],\n//         datasets: [\n//           {\n//             label: 'Effort restant',\n//             data: [],\n//             borderColor: 'blue',\n//             fill: false\n//           },\n//           {\n//             label: 'Tendance idéale',\n//             data: this.generateIdealTrend(sprint),\n//             borderColor: 'green',\n//             fill: false\n//           }\n//         ]\n//       },\n//       options: {\n//         title: {\n//           display: true,\n//           text: 'Burn Down Chart'\n//         },\n//         scales: {\n//           xAxes: [{\n//             type: 'time',\n//             time: {\n//               unit: 'day',\n//               tooltipFormat: 'll'\n//             }\n//           }],\n//           yAxes: [{\n//             ticks: {\n//               beginAtZero: true,\n//               stepSize: 1\n//             }\n//           }]\n//         }\n//       }\n//     });\n//     // récupère les tickets du sprint sélectionné\n//     const tickets = sprint.tickets;\n//     // génère les données pour l'axe X (dates) et pour l'axe Y (effort restant)\n//     const labels = [];\n//     const data = [];\n//     let remainingEffort = sprint.velocite;\n//     labels.push(sprint.dateLancement);\n//     data.push(remainingEffort);\n//     for (let i = 0; i < tickets.length; i++) {\n//       remainingEffort -= tickets[i].effort;\n//       labels.push(tickets[i].dateFin);\n//       data.push(remainingEffort);\n//     }\n//     labels.push(sprint.dateFin);\n//     data.push(0);\n//     this.chart.data.labels = labels;\n//     this.chart.data.datasets[0].data = data;\n//     this.chart.update();\n//   }\n//   // génère la tendance idéale pour le sprint spécifié\n//   generateIdealTrend(sprint:Sprint) {\n//     const idealTrend = [];\n//     idealTrend.push({x: sprint.dateLancement, y: sprint.velocite});\n//     idealTrend.push({x: sprint.dateFin, y: 0});\n//     return idealTrend;\n//   }\n// }\nimport { ElementRef } from '@angular/core';\nimport Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nvar _c0 = [\"canvas\"];\nfunction CourbesComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var sprint_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", sprint_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(sprint_r2.id);\n  }\n}\nfunction CourbesComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"canvas\", 6);\n    i0.ɵɵelementEnd();\n  }\n}\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.sprints = [];\n    this.tickets = [];\n    this.chart = null;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n    }, function (error) {\n      console.error(error);\n    });\n    var labels = this.getLabels();\n    var data = this.getData();\n    var chartConfig = {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Effort réel',\n          data: data.actualEffort,\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'Effort idéal',\n          data: data.idealEffort,\n          borderColor: 'red',\n          fill: false\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'category',\n            labels: labels\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Effort'\n            }\n          }\n        }\n      }\n    };\n    this.drawBurnDownChart();\n  };\n  CourbesComponent.prototype.onSprintSelectChange = function () {\n    var _this = this;\n    var selectedSprintId = Number(document.getElementById('sprintSelect').value);\n    this.histoireTicketService.getHistoireTicketBySprintId(selectedSprintId).subscribe(function (tickets) {\n      _this.tickets = tickets;\n      _this.selectedSprint = _this.sprints.find(function (sprint) {\n        return sprint.id === selectedSprintId;\n      });\n      _this.drawBurnDownChart();\n    }, function (error) {\n      console.error(error);\n    });\n  };\n  CourbesComponent.prototype.ngAfterViewInit = function () {\n    this.drawBurnDownChart();\n  };\n  CourbesComponent.prototype.drawBurnDownChart = function () {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    var canvas = this.canvasRef.nativeElement;\n    if (!canvas) {\n      throw new Error('Cannot find canvas element');\n    }\n    var context = canvas.getContext('2d');\n    if (!context) {\n      throw new Error('Cannot get context of canvas');\n    }\n    // ...\n    this.chart = new Chart(context, chartConfig);\n  };\n  CourbesComponent.prototype.getLabels = function () {\n    var startDate = new Date(this.selectedSprint.dateLancement);\n    var endDate = new Date(this.selectedSprint.dateFin);\n    var labels = [];\n    var days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    for (var i = 0; i <= days; i++) {\n      var date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n      labels.push(date.toISOString().slice(0, 10));\n    }\n    return labels;\n  };\n  CourbesComponent.prototype.getData = function () {\n    var data = {\n      actualEffort: [],\n      idealEffort: []\n    };\n    var remainingEffort = this.tickets.reduce(function (sum, ticket) {\n      return sum + ticket.effort;\n    }, 0);\n    var startDate = new Date(this.selectedSprint.dateLancement);\n    var endDate = new Date(this.selectedSprint.dateFin);\n    var days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    var idealEffortPerDay = remainingEffort / days;\n    data.actualEffort.push(remainingEffort);\n    data.idealEffort.push(remainingEffort);\n    var _loop_1 = function (i) {\n      var date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n      var effortForDate = this_1.tickets.filter(function (ticket) {\n        return ticket.dateFin <= date;\n      }).reduce(function (sum, ticket) {\n        return sum + ticket.effort;\n      }, 0);\n      remainingEffort -= effortForDate;\n      data.actualEffort.push(remainingEffort);\n      data.idealEffort.push(Math.max(0, data.idealEffort[0] - idealEffortPerDay * i));\n    };\n    var this_1 = this;\n    for (var i = 1; i <= days; i++) {\n      _loop_1(i);\n    }\n    return data;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    viewQuery: function CourbesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);\n      }\n    },\n    decls: 6,\n    vars: 2,\n    consts: [[1, \"page\"], [\"for\", \"sprintSelect\"], [\"id\", \"sprintSelect\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [3, \"value\"], [\"id\", \"burnDownChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n        i0.ɵɵtext(2, \"S\\u00E9lectionnez un sprint :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"select\", 2);\n        i0.ɵɵlistener(\"change\", function CourbesComponent_Template_select_change_3_listener() {\n          return ctx.onSprintSelectChange();\n        });\n        i0.ɵɵtemplate(4, CourbesComponent_option_4_Template, 2, 2, \"option\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(5, CourbesComponent_div_5_Template, 2, 0, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sprints);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedSprint);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.NgSelectOption, i5.ɵNgSelectMultipleOption],\n    styles: [\".page[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 200px;\\n  right: 100px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}