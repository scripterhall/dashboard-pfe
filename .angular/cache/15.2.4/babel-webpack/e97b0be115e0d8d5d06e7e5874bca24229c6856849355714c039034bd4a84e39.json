{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var e_1, _a;\n    // Données de test\n    var sprints = [{\n      id: 1,\n      velocite: 29,\n      dateLancement: '2023-04-01',\n      dateFin: '2023-04-07'\n    }, {\n      id: 2,\n      velocite: 26,\n      dateLancement: '2023-04-08',\n      dateFin: '2023-04-14'\n    }, {\n      id: 3,\n      velocite: 5,\n      dateLancement: '2023-04-15',\n      dateFin: '2023-04-21'\n    }];\n    var tickets = [{\n      id: 1,\n      idSprint: 1,\n      effort: 5,\n      dateDebut: '2023-04-01',\n      dateFin: '2023-04-02',\n      etat: 'done'\n    }, {\n      id: 2,\n      idSprint: 1,\n      effort: 8,\n      dateDebut: '2023-04-03',\n      dateFin: '2023-04-04',\n      etat: 'done'\n    }, {\n      id: 3,\n      idSprint: 1,\n      effort: 3,\n      dateDebut: '2023-04-03',\n      dateFin: '2023-04-04',\n      etat: 'done'\n    }, {\n      id: 4,\n      idSprint: 1,\n      effort: 13,\n      dateDebut: '2023-04-08',\n      dateFin: '2023-04-10',\n      etat: 'done'\n    }, {\n      id: 5,\n      idSprint: 2,\n      effort: 8,\n      dateDebut: '2023-04-11',\n      dateFin: '2023-04-13',\n      etat: 'done'\n    }, {\n      id: 6,\n      idSprint: 2,\n      effort: 13,\n      dateDebut: '2023-04-15',\n      dateFin: '2023-04-18',\n      etat: 'done'\n    }, {\n      id: 7,\n      idSprint: 2,\n      effort: 5,\n      dateDebut: '2023-04-19',\n      dateFin: '2023-04-21',\n      etat: 'done'\n    }, {\n      id: 8,\n      idSprint: 3,\n      effort: 5,\n      dateDebut: '2023-04-20',\n      dateFin: '2023-04-21',\n      etat: 'todo'\n    }];\n    // Tableaux pour stocker les données de la charte\n    var labels = []; // Les dates de chaque sprint\n    var velocities = []; // Les velocités de chaque sprint\n    var idealData = []; // Les valeurs idéales pour le burn up chart\n    var actualData = []; // Les valeurs réelles pour le burn up chart\n    var _loop_1 = function (sprint) {\n      var startDate = new Date(sprint.dateLancement);\n      var endDate = new Date(sprint.dateFin);\n      var sprintLabel = \"\".concat(startDate.getMonth() + 1, \"/\").concat(startDate.getDate(), \"-\").concat(endDate.getMonth() + 1, \"/\").concat(endDate.getDate()); // Format de la date pour l'affichage sur l'axe x\n      labels.push(sprintLabel);\n      velocities.push(sprint.velocite);\n      // Calculer la valeur idéale pour chaque sprint\n      var ideal = velocities.reduce(function (acc, curr) {\n        return acc + curr;\n      }, 0);\n      idealData.push(ideal);\n      // Calculer la valeur réelle pour chaque sprint\n      var ticketsInSprint = tickets.filter(function (ticket) {\n        return ticket.idSprint === sprint.id;\n      });\n      var doneTickets = ticketsInSprint.filter(function (ticket) {\n        return ticket.etat === 'done';\n      });\n      var actual = doneTickets.reduce(function (acc, curr) {\n        return acc + curr.effort;\n      }, 0);\n      actualData.push(actual);\n    };\n    try {\n      // Calculer les dates de chaque sprint et stocker les données dans les tableaux correspondants\n      for (var sprints_1 = __values(sprints), sprints_1_1 = sprints_1.next(); !sprints_1_1.done; sprints_1_1 = sprints_1.next()) {\n        var sprint = sprints_1_1.value;\n        _loop_1(sprint);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (sprints_1_1 && !sprints_1_1.done && (_a = sprints_1.return)) _a.call(sprints_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    // Tracer le burn up chart avec Chart.js\n    var ctx = document.getElementById('burnupChart');\n    var burnupChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Idéal',\n          data: idealData,\n          borderColor: 'rgba(54, 162, 235, 1)',\n          fill: false\n        }, {\n          label: 'Réel',\n          data: actualData,\n          borderColor: 'rgba(255, 99, 132, 1)',\n          fill: false\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Burn Up Chart'\n        },\n        scales: {\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Période'\n            }\n          }],\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Effort'\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"chart-container\"], [\"id\", \"burnupChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}