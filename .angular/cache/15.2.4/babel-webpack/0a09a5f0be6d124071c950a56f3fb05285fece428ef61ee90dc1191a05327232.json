{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar dataPoints = [];\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.sprints = [{\n      id: 1,\n      dateLancement: '2023-04-01',\n      dateFin: '2023-04-14',\n      velocite: 29\n    }, {\n      id: 2,\n      dateLancement: '2023-04-15',\n      dateFin: '2023-04-28',\n      velocite: 34\n    }, {\n      id: 3,\n      dateLancement: '2023-04-29',\n      dateFin: '2023-05-12',\n      velocite: 8\n    }, {\n      id: 4,\n      dateLancement: '2023-05-13',\n      dateFin: '2023-05-26',\n      velocite: 10\n    }];\n    this.tickets = [{\n      id: 1,\n      idSprint: 1,\n      dateDebut: '2023-04-02',\n      dateFin: '2023-04-08',\n      effort: 5,\n      etat: 'terminé'\n    }, {\n      id: 2,\n      idSprint: 1,\n      dateDebut: '2023-04-02',\n      dateFin: '2023-04-08',\n      effort: 8,\n      etat: 'terminé'\n    }, {\n      id: 3,\n      idSprint: 1,\n      dateDebut: '2023-04-03',\n      dateFin: '2023-04-12',\n      effort: 13,\n      etat: 'terminé'\n    }, {\n      id: 4,\n      idSprint: 1,\n      dateDebut: '2023-04-05',\n      dateFin: '2023-04-13',\n      effort: 3,\n      etat: 'en cours'\n    }, {\n      id: 5,\n      idSprint: 2,\n      dateDebut: '2023-04-16',\n      dateFin: '2023-04-18',\n      effort: 8,\n      etat: 'terminé'\n    }, {\n      id: 6,\n      idSprint: 2,\n      dateDebut: '2023-04-19',\n      dateFin: '2023-04-21',\n      effort: 5,\n      etat: 'terminé'\n    }, {\n      id: 7,\n      idSprint: 2,\n      dateDebut: '2023-04-24',\n      dateFin: '2023-04-27',\n      effort: 13,\n      etat: 'en attente'\n    }, {\n      id: 8,\n      idSprint: 3,\n      dateDebut: '2023-04-30',\n      dateFin: '2023-05-10',\n      effort: 8,\n      etat: 'terminé'\n    }];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {};\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[2, \"position\", \"relative\", \"top\", \"30px\"], [\"chartRef\", \"\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}