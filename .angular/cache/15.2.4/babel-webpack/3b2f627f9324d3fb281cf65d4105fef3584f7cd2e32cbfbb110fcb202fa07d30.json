{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ToastrService } from 'ngx-toastr';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { TicketTacheService } from 'src/app/service/ticket-tache.service';\nimport Sortable from 'sortablejs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"src/app/service/ticket-tache.service\";\nimport * as i3 from \"src/app/service/product-backlog.service\";\nimport * as i4 from \"src/app/service/sprint.service\";\nvar ScrumBoardComponent = /** @class */function () {\n  function ScrumBoardComponent(toastr, ticketTacheService, productBacklogService, sprintService) {\n    this.toastr = toastr;\n    this.ticketTacheService = ticketTacheService;\n    this.productBacklogService = productBacklogService;\n    this.sprintService = sprintService;\n    this.staticAlertClosed = false;\n    this.staticAlertClosed1 = false;\n    this.staticAlertClosed2 = false;\n    this.staticAlertClosed3 = false;\n    this.staticAlertClosed4 = false;\n    this.staticAlertClosed5 = false;\n    this.staticAlertClosed6 = false;\n    this.staticAlertClosed7 = false;\n    this.ticketsTache = [];\n    this.movedElementId = '';\n  }\n  ScrumBoardComponent.prototype.showNotification = function (from, align) {\n    var color = Math.floor(Math.random() * 5 + 1);\n    switch (color) {\n      case 1:\n        this.toastr.info('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-info alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 2:\n        this.toastr.success('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-success alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 3:\n        this.toastr.warning('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-warning alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 4:\n        this.toastr.error('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          enableHtml: true,\n          closeButton: true,\n          toastClass: \"alert alert-danger alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 5:\n        this.toastr.show('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-primary alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  ScrumBoardComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n    });\n  };\n  ScrumBoardComponent.prototype.getTicketsTacheBySprint = function (sprintId) {\n    var _this = this;\n    if (sprintId) {\n      this.ticketTacheService.getTicketsTacheBySprint(sprintId).subscribe(function (tickets) {\n        _this.ticketsTache = tickets;\n        console.log(_this.ticketsTache);\n      });\n    } else {\n      this.ticketsTache = null;\n    }\n  };\n  // ngAfterViewInit() {\n  //   const cardBodies = document.querySelectorAll('.card-body');\n  //   const myArray = Array.from(cardBodies);\n  //   for (const body of myArray) {\n  //     const sortable = new Sortable(body, {\n  //       group: 'shared',\n  //       animation: 150,\n  //       onEnd: (evt) => {\n  //         console.log('Moved item', evt.item, 'from index', evt.oldIndex, 'to index', evt.newIndex);\n  //         const targetId = evt.to.id;\n  //         this.etat=String(targetId);\n  //         console.log('Target element ID:', targetId);\n  //       }\n  //     })\n  // }\n  // }\n  // onDrop(event: DragEvent, tache: any) {\n  //   console.log(\"ID de la tache: \", tache.id);\n  //   console.log(\"Titre de la tache: \", tache.titre);\n  // }\n  ScrumBoardComponent.prototype.ngAfterViewInit = function () {\n    var e_1, _a;\n    var cardBodies = document.querySelectorAll('.card-body');\n    var myArray = Array.from(cardBodies);\n    try {\n      for (var myArray_1 = __values(myArray), myArray_1_1 = myArray_1.next(); !myArray_1_1.done; myArray_1_1 = myArray_1.next()) {\n        var body = myArray_1_1.value;\n        var sortable = new Sortable(body, {\n          group: 'shared',\n          animation: 150,\n          onEnd: function (evt) {\n            console.log('Moved item', evt.item, 'from index', evt.oldIndex, 'to index', evt.newIndex);\n            console.log('Target element ID:', evt.to.id);\n          }\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (myArray_1_1 && !myArray_1_1.done && (_a = myArray_1.return)) _a.call(myArray_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  // onDragStart(event: DragEvent, tache: any) {\n  //   const targetElement = event.target as Element; // cast EventTarget to Element\n  //   const id = targetElement.getAttribute('data-id'); // call getAttribute on Element\n  //   const containerElement = targetElement.closest('.card-body') as HTMLElement; // trouver l'élément parent avec la classe 'card-body'\n  //   const containerId = containerElement.getAttribute('id'); // récupérer la valeur de l'ID de l'élément parent\n  //   console.log('dragging task with id:', id, 'in container with id:', containerId);\n  // }\n  ScrumBoardComponent.prototype.onDrop = function (event, tache) {\n    var targetElement = event.target; // cast EventTarget to Element\n    var id = targetElement.getAttribute('data-id'); // call getAttribute on Element\n    var containerElement = targetElement.closest('.card-body'); // trouver l'élément parent avec la classe 'card-body'\n    var containerId = containerElement.getAttribute('id'); // récupérer la valeur de l'ID de l'élément parent\n    console.log('dragging task with id:', id, 'in container with id:', containerId);\n    // Modifier l'état de la tache\n    tache.etat = containerId;\n    // Appeler la méthode pour mettre à jour le ticket\n    this.ticketTacheService.modifierTicketTache(tache).subscribe(function (modifiedTicket) {\n      console.log('Task state updated:', modifiedTicket);\n      // Traiter la réponse de la méthode ici si nécessaire\n    }, function (error) {\n      console.error('Error updating task state:', error);\n      // Traiter l'erreur ici si nécessaire\n    });\n  };\n\n  ScrumBoardComponent.ɵfac = function ScrumBoardComponent_Factory(t) {\n    return new (t || ScrumBoardComponent)(i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i2.TicketTacheService), i0.ɵɵdirectiveInject(i3.ProductBacklogService), i0.ɵɵdirectiveInject(i4.SprintService));\n  };\n  ScrumBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ScrumBoardComponent,\n    selectors: [[\"app-scrum-board\"]],\n    decls: 0,\n    vars: 0,\n    template: function ScrumBoardComponent_Template(rf, ctx) {},\n    styles: [\".scrum-board[_ngcontent-%COMP%] {\\n  display: flex;\\n  height: 100%;\\n  width: 100%;\\n  background-color: #121212;\\n}\\n\\n.scrum-column[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 33.3%;\\n  height: 100%;\\n}\\n\\n.scrum-column[_ngcontent-%COMP%]   mat-toolbar[_ngcontent-%COMP%] {\\n  height: 64px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\n.column-title[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  font-weight: bold;\\n  margin-left: 8px;\\n  color: #fff;\\n}\\n\\n.drag-handle[_ngcontent-%COMP%] {\\n  cursor: move;\\n  color: #fff;\\n}\\n\\n.scrum-list[_ngcontent-%COMP%] {\\n  padding: 8px;\\n  overflow-y: auto;\\n  flex-grow: 1;\\n  background-color: #1f1f1f;\\n  border-radius: 8px;\\n}\\n\\n.scrum-item[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  padding: 8px;\\n  margin-bottom: 8px;\\n  background-color: #292929;\\n  border-radius: 8px;\\n}\\n\\n.scrum-content[_ngcontent-%COMP%] {\\n  margin-left: 8px;\\n  color: #fff;\\n}\\n\\n.scrum-content[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 16px;\\n  font-weight: bold;\\n}\\n\\n.scrum-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 14px;\\n}\\n\\n.card-body.drop-zone[_ngcontent-%COMP%] {\\n  min-height: 100px;\\n  background-color: #f5f5f5;\\n}\\n\\n.drag-handle[_ngcontent-%COMP%] {\\n  cursor: move;\\n}\"]\n  });\n  return ScrumBoardComponent;\n}();\nexport { ScrumBoardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}