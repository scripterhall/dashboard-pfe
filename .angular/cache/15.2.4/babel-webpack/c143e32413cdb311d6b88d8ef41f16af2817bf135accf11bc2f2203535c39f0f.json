{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar _c0 = [\"myChart\"];\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // Obtenez la liste des sprints à partir du service Sprint\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprintList) {\n      var sprintData = [];\n      var sprintScope = [];\n      for (var i = 0; i < sprintList.length; i++) {\n        var sprint = sprintList[i];\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (ticketList) {\n          var finishedTickets = ticketList.filter(function (ticket) {\n            return ticket.status === 'TERMINE';\n          });\n          var totalEffort = 0;\n          for (var j = 0; j < finishedTickets.length; j++) {\n            var ticket = finishedTickets[j];\n            totalEffort += ticket.effort;\n          }\n          sprintData.push(totalEffort);\n          var sprintTotalScope = 0;\n          for (var j = 0; j < ticketList.length; j++) {\n            var ticket = ticketList[j];\n            sprintTotalScope += ticket.effort;\n          }\n          sprintScope.push(sprintTotalScope);\n          if (sprintData.length === sprintList.length) {\n            var chartData = {\n              labels: sprintList.map(function (sprint) {\n                return sprint.id;\n              }),\n              datasets: [{\n                label: 'Effort accompli',\n                data: sprintData,\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                borderColor: 'rgba(75, 192, 192, 1)',\n                borderWidth: 1\n              }, {\n                label: 'Portée',\n                data: sprintScope,\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1\n              }]\n            };\n            var chart = new Chart(_this.myChart.nativeElement, {\n              type: 'line',\n              data: chartData,\n              options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  }\n                }\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    viewQuery: function CourbesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"myChart\"], [\"myChart\", \"\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".myChart[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 30px;\\n  height: 400px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}