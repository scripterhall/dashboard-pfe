{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import Chart from 'chart.js';\n// import { Sprint } from 'src/app/model/sprint';\n// import { TicketHistoire } from 'src/app/model/ticket-histoire';\n// import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\n// import { ProductBacklogService } from 'src/app/service/product-backlog.service';\n// import { SprintService } from 'src/app/service/sprint.service';\n// @Component({\n//   selector: 'app-courbes',\n//   templateUrl: './courbes.component.html',\n//   styleUrls: ['./courbes.component.scss']\n// })\n// export class CourbesComponent implements OnInit {\n//   constructor(private sprintService:SprintService,\n//     private productBacklogService:ProductBacklogService,\n//     private histoireTicketService:HistoireTicketService) { }\n//     sprints:Sprint[];\n//     selectedSprint:Sprint; // nouvelle variable pour stocker le sprint sélectionné\n//     tickets: TicketHistoire[];\n//     // le reste du code est inchangé\n//     chart: Chart;\n//   ngOnInit() {\n//     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(\n//       data => {\n//         this.sprints = data ;\n//         console.log(data);\n//       },\n//       error => {\n//         console.error(error);\n//       }\n//     );\n//     // initialise le graphique avec le premier sprint de la liste\n//     this.selectedSprint = this.sprints[0];\n//     this.updateChart(this.selectedSprint);\n// }\n//   // méthode pour mettre à jour le graphique avec les données du sprint spécifié\n//   updateChart(sprint:Sprint) {\n//     this.chart = new Chart('canvas', {\n//       type: 'line',\n//       data: {\n//         labels: [],\n//         datasets: [\n//           {\n//             label: 'Effort restant',\n//             data: [],\n//             borderColor: 'blue',\n//             fill: false\n//           },\n//           {\n//             label: 'Tendance idéale',\n//             data: this.generateIdealTrend(sprint),\n//             borderColor: 'green',\n//             fill: false\n//           }\n//         ]\n//       },\n//       options: {\n//         title: {\n//           display: true,\n//           text: 'Burn Down Chart'\n//         },\n//         scales: {\n//           xAxes: [{\n//             type: 'time',\n//             time: {\n//               unit: 'day',\n//               tooltipFormat: 'll'\n//             }\n//           }],\n//           yAxes: [{\n//             ticks: {\n//               beginAtZero: true,\n//               stepSize: 1\n//             }\n//           }]\n//         }\n//       }\n//     });\n//     // récupère les tickets du sprint sélectionné\n//     const tickets = sprint.tickets;\n//     // génère les données pour l'axe X (dates) et pour l'axe Y (effort restant)\n//     const labels = [];\n//     const data = [];\n//     let remainingEffort = sprint.velocite;\n//     labels.push(sprint.dateLancement);\n//     data.push(remainingEffort);\n//     for (let i = 0; i < tickets.length; i++) {\n//       remainingEffort -= tickets[i].effort;\n//       labels.push(tickets[i].dateFin);\n//       data.push(remainingEffort);\n//     }\n//     labels.push(sprint.dateFin);\n//     data.push(0);\n//     this.chart.data.labels = labels;\n//     this.chart.data.datasets[0].data = data;\n//     this.chart.update();\n//   }\n//   // génère la tendance idéale pour le sprint spécifié\n//   generateIdealTrend(sprint:Sprint) {\n//     const idealTrend = [];\n//     idealTrend.push({x: sprint.dateLancement, y: sprint.velocite});\n//     idealTrend.push({x: sprint.dateFin, y: 0});\n//     return idealTrend;\n//   }\n// }","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}