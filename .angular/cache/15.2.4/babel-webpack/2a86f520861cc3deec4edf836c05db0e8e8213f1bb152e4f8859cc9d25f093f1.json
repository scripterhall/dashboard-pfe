{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { TicketTacheService } from 'src/app/service/ticket-tache.service';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nvar ScrumBoardComponent = /** @class */function () {\n  function ScrumBoardComponent(toastr, ticketTacheService, productBacklogService, sprintService, http) {\n    this.toastr = toastr;\n    this.ticketTacheService = ticketTacheService;\n    this.productBacklogService = productBacklogService;\n    this.sprintService = sprintService;\n    this.http = http;\n    this.staticAlertClosed = false;\n    this.staticAlertClosed1 = false;\n    this.staticAlertClosed2 = false;\n    this.staticAlertClosed3 = false;\n    this.staticAlertClosed4 = false;\n    this.staticAlertClosed5 = false;\n    this.staticAlertClosed6 = false;\n    this.staticAlertClosed7 = false;\n    this.ticketsTache = [];\n    this.movedElementId = '';\n  }\n  ScrumBoardComponent.prototype.showNotification = function (from, align) {\n    var color = Math.floor(Math.random() * 5 + 1);\n    switch (color) {\n      case 1:\n        this.toastr.info('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-info alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 2:\n        this.toastr.success('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-success alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 3:\n        this.toastr.warning('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-warning alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 4:\n        this.toastr.error('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          enableHtml: true,\n          closeButton: true,\n          toastClass: \"alert alert-danger alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      case 5:\n        this.toastr.show('<span class=\"tim-icons icon-bell-55\" [data-notify]=\"icon\"></span> Welcome to <b>Black Dashboard Angular</b> - a beautiful freebie for every web developer.', '', {\n          disableTimeOut: true,\n          closeButton: true,\n          enableHtml: true,\n          toastClass: \"alert alert-primary alert-with-icon\",\n          positionClass: 'toast-' + from + '-' + align\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  ScrumBoardComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.sprints = data;\n    });\n  };\n  ScrumBoardComponent.prototype.getTicketsTacheBySprint = function (sprintId) {\n    var _this = this;\n    if (sprintId) {\n      this.ticketTacheService.getTicketsTacheBySprint(sprintId).subscribe(function (tickets) {\n        _this.ticketsTache = tickets;\n        console.log(_this.ticketsTache);\n      });\n    } else {\n      this.ticketsTache = null;\n    }\n  };\n  // ngAfterViewInit() {\n  //   const cardBodies = document.querySelectorAll('.card-body');\n  //   const myArray = Array.from(cardBodies);\n  //   for (const body of myArray) {\n  //     const sortable = new Sortable(body, {\n  //       group: 'shared',\n  //       animation: 150,\n  //       onEnd: (evt) => {\n  //         console.log('Moved item', evt.item, 'from index', evt.oldIndex, 'to index', evt.newIndex);\n  //         const targetId = evt.to.id;\n  //         this.etat=String(targetId);\n  //         console.log('Target element ID:', targetId);\n  //       }\n  //     });\n  //   }\n  // }\n  // onDrop(event: DragEvent, ticketTache: TacheTicket) {\n  //   console.log(\"Etattttt= \"+this.etat);\n  //   ticketTache.etat=this.etat;\n  //   const targetElement = event.currentTarget as HTMLElement;\n  //   console.log('Item dropped on element with ID:', targetElement.id);\n  //   this.ticketTacheService.modifierTicketTache(ticketTache)\n  //     .subscribe(\n  //       (modifiedTicket: TacheTicket) => {\n  //         console.log('Ticket modifié :', modifiedTicket);\n  //       },\n  //       (error) => {\n  //         console.error('Erreur lors de la modification du ticket :', error);\n  //       }\n  //     );\n  // }\n  ScrumBoardComponent.prototype.onDrop = function (event) {\n    var _this = this;\n    var previousIndex = event.previousIndex;\n    var newIndex = event.currentIndex;\n    var tache = event.item.data;\n    tache.etat = event.container.id;\n    this.modifierTicketTache(tache).subscribe(function () {\n      moveItemInArray(_this.ticketsTache, previousIndex, newIndex);\n    });\n  };\n  ScrumBoardComponent.prototype.onDragStarted = function (tache) {\n    // Faites quelque chose quand un élément commence à être déplacé\n  };\n  ScrumBoardComponent.prototype.modifierTicketTache = function (ticketTache) {\n    return this.http.put(\"\".concat(URL), ticketTache, {\n      observe: 'response'\n    }).pipe(map(function (response) {\n      var modifiedTicket = response.body;\n      if (response.status === 404) {\n        return null;\n      }\n      return modifiedTicket;\n    }));\n  };\n  var _a;\n  ScrumBoardComponent = __decorate([Component({\n    selector: 'app-scrum-board',\n    templateUrl: './scrum-board.component.html',\n    styleUrls: ['./scrum-board.component.scss']\n  }), __metadata(\"design:paramtypes\", [ToastrService, TicketTacheService, ProductBacklogService, SprintService, typeof (_a = typeof HttpC !== \"undefined\" && HttpC) === \"function\" ? _a : Object])], ScrumBoardComponent);\n  return ScrumBoardComponent;\n}();\nexport { ScrumBoardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}