{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar _c0 = [\"myChart\"];\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.votreService.getListSprintsByProductBacklog(productBacklogId).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      _this.getTicketsHistoire();\n    });\n  };\n  CourbesComponent.prototype.getTicketsHistoire = function () {\n    var _this = this;\n    for (var i = 0; i < this.sprints.length; i++) {\n      this.votreService.getHistoireTicketBySprintId(this.sprints[i].id).subscribe(function (tickets) {\n        _this.ticketsHistoire = _this.ticketsHistoire.concat(tickets);\n        _this.drawBurnUpChart();\n      });\n    }\n  };\n  CourbesComponent.prototype.drawBurnUpChart = function () {\n    // Créer un tableau pour stocker les données des sprints\n    var dataSprints = [];\n    // Créer un tableau pour stocker les données d'effort total\n    var dataTotal = [];\n    // Créer un tableau pour stocker les données d'effort terminé\n    var dataCompleted = [];\n    // Pour chaque sprint, calculer l'effort total et l'effort terminé\n    for (var i = 0; i < this.sprints.length; i++) {\n      var totalEffort = 0;\n      var completedEffort = 0;\n      for (var j = 0; j < this.ticketsHistoire.length; j++) {\n        if (this.ticketsHistoire[j].idSprint === this.sprints[i].id) {\n          totalEffort += this.ticketsHistoire[j].effort;\n          if (this.ticketsHistoire[j].dateFin <= this.sprints[i].dateFin) {\n            completedEffort += this.ticketsHistoire[j].effort;\n          }\n        }\n      }\n      dataSprints.push(this.sprints[i].id);\n      dataTotal.push(totalEffort);\n      dataCompleted.push(completedEffort);\n    }\n    // Créer un graphique BurnUp avec les données calculées\n    this.chart = new Chart('burnUpChart', {\n      type: 'line',\n      data: {\n        labels: dataSprints,\n        datasets: [{\n          label: 'Total',\n          borderColor: 'blue',\n          data: dataTotal\n        }, {\n          label: 'Completed',\n          borderColor: 'green',\n          data: dataCompleted\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: 'BurnUp Chart'\n        },\n        scales: {\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Sprint'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'Effort'\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    viewQuery: function CourbesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"myChart\"], [\"myChart\", \"\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".myChart[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 30px;\\n  height: 400px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}