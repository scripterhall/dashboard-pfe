{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      var _loop_1 = function (i) {\n        var sprint = _this.sprints[i];\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n          // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n          console.log(tickets);\n          var labels = [];\n          var data = [];\n          var remainingEffort = sprint.velocite;\n          labels.push(sprint.dateLancement);\n          data.push(remainingEffort);\n          for (var j = 0; j < tickets.length; j++) {\n            remainingEffort -= tickets[j].effort;\n            labels.push(tickets[j].dateFin);\n            console.log(tickets[j].dateFin);\n            data.push(remainingEffort);\n          }\n          labels.push(sprint.dateFin);\n          data.push(0);\n          var chart = new Chart(\"canvas-\".concat(sprint.id), {\n            type: 'line',\n            data: {\n              labels: labels,\n              datasets: [{\n                label: 'Effort restant',\n                data: data,\n                borderColor: 'blue',\n                fill: false\n              }, {\n                label: 'Tendance idéale',\n                data: _this.generateIdealTrend(sprint),\n                borderColor: 'green',\n                fill: false\n              }]\n            },\n            options: {\n              title: {\n                display: true,\n                text: \"Burn Down Chart - Sprint \".concat(sprint.id)\n              },\n              scales: {\n                xAxes: [{\n                  type: 'time',\n                  time: {\n                    unit: 'day',\n                    tooltipFormat: 'll'\n                  }\n                }],\n                yAxes: [{\n                  ticks: {\n                    beginAtZero: true,\n                    stepSize: 1\n                  }\n                }]\n              }\n            }\n          });\n        });\n      };\n      // Générer un graphique Burn Down pour chaque sprint\n      for (var i = 0; i < _this.sprints.length; i++) {\n        _loop_1(i);\n      }\n    });\n  };\n  // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  CourbesComponent.prototype.generateIdealTrend = function (sprint) {\n    var idealTrend = [];\n    idealTrend.push({\n      x: sprint.dateLancement,\n      y: sprint.velocite\n    });\n    idealTrend.push({\n      x: sprint.dateFin,\n      y: 0\n    });\n    return idealTrend;\n  };\n  CourbesComponent = __decorate([Component({\n    selector: 'app-courbes',\n    templateUrl: './courbes.component.html',\n    styleUrls: ['./courbes.component.scss']\n  }), __metadata(\"design:paramtypes\", [SprintService, ProductBacklogService, HistoireTicketService])], CourbesComponent);\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}