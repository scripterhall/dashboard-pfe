{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    // constructor(private sprintService:SprintService,\n    //   private productBacklogService:ProductBacklogService,\n    //   private histoireTicketService:HistoireTicketService) { }\n    //   sprints: Sprint[];\n    //   chart: Chart;\n    //   ngOnInit() {\n    //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n    //       this.sprints = sprints;\n    //       // Générer un graphique Burn Down pour chaque sprint\n    //       for (let i = 0; i < this.sprints.length; i++) {\n    //         const sprint = this.sprints[i];\n    //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n    //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n    //           console.log(tickets);\n    //           const labels = [];\n    //           const data = [];\n    //           let remainingEffort = sprint.velocite;\n    //           labels.push(sprint.dateLancement);\n    //           data.push(remainingEffort);\n    //           for (let j = 0; j < tickets.length; j++) {\n    //             remainingEffort -= tickets[j].effort;\n    //             labels.push(tickets[j].dateFin);\n    //             console.log(tickets[j].dateFin);\n    //             data.push(remainingEffort);\n    //           }\n    //           labels.push(sprint.dateFin);\n    //           data.push(0);\n    //           const chart = new Chart(`canvas-${sprint.id}`, {\n    //             type: 'line',\n    //             data: {\n    //               labels: labels,\n    //               datasets: [\n    //                 {\n    //                   label: 'Effort restant',\n    //                   data: data,\n    //                   borderColor: 'blue',\n    //                   fill: false\n    //                 },\n    //                 {\n    //                   label: 'Tendance idéale',\n    //                   data: this.generateIdealTrend(sprint),\n    //                   borderColor: 'green',\n    //                   fill: false\n    //                 }\n    //               ]\n    //             },\n    //             options: {\n    //               title: {\n    //                 display: true,\n    //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n    //               },\n    //               scales: {\n    //                 xAxes: [{\n    //                   type: 'time',\n    //                   time: {\n    //                     unit: 'day',\n    //                     tooltipFormat: 'll'\n    //                   }\n    //                 }],\n    //                 yAxes: [{\n    //                   ticks: {\n    //                     beginAtZero: true,\n    //                     stepSize: 1\n    //                   }\n    //                 }]\n    //               }\n    //             }\n    //           });\n    //         });\n    //       }\n    //     });\n    //   }\n    // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n    // private generateIdealTrend(sprint: Sprint): any[] {\n    //   const idealTrend = [];\n    //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n    //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n    //   return idealTrend;\n    // }\n    this.sprints = [];\n    this.ticketsHistoire = [];\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      _this.getTicketsHistoire();\n    });\n  };\n  CourbesComponent.prototype.getTicketsHistoire = function () {\n    var _this = this;\n    for (var i = 0; i < this.sprints.length; i++) {\n      this.histoireTicketService.getHistoireTicketBySprintId(this.sprints[i].id).subscribe(function (tickets) {\n        _this.ticketsHistoire = _this.ticketsHistoire.concat(tickets);\n        _this.drawBurnUpChart();\n      });\n    }\n  };\n  CourbesComponent.prototype.isTicketTerminated = function (ticket, sprint) {\n    return ticket.dateFin <= sprint.dateFin && ticket.status === 'TERMINE';\n  };\n  CourbesComponent.prototype.drawBurnUpChart = function () {\n    var _this = this;\n    // Récupérer les données de sprints et de ticketsHistoire depuis votre service\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogId).subscribe(function (sprints) {\n      _this.ticketHistoireService.getHistoireTicketBySprintId(sprints[0].id).subscribe(function (tickets) {\n        var totalEffort = 0;\n        var completedEffort = 0;\n        var labels = [];\n        var data = [];\n        // Boucle pour traiter chaque sprint\n        sprints.forEach(function (sprint, index) {\n          // Ajouter le sprint en tant que label pour l'axe x du graphique\n          labels.push(\"Sprint \".concat(index + 1));\n          // Boucle pour traiter chaque ticket pour ce sprint\n          tickets.forEach(function (ticket) {\n            if (ticket.idSprint === sprint.id) {\n              totalEffort += ticket.effort;\n              if (_this.isTicketTerminated(ticket, sprint)) {\n                completedEffort += ticket.effort;\n              }\n            }\n          });\n          // Ajouter le total des efforts pour ce sprint au tableau de données\n          data.push(totalEffort);\n        });\n        // Créer le graphique BurnUp en utilisant les données collectées\n        _this.chart = new Chart('burnUpChart', {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Total',\n              data: data,\n              fill: false,\n              borderColor: 'blue'\n            }, {\n              label: 'Completed',\n              data: [0, completedEffort, completedEffort\n              // ...\n              ],\n\n              fill: false,\n              borderColor: 'green'\n            }]\n          },\n          options: {\n            // ...\n          }\n        });\n      });\n    });\n  };\n  CourbesComponent.prototype.isTicketTerminated = function (ticket, sprint) {\n    return ticket.dateFin <= sprint.dateFin && ticket.etat === 'terminé';\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"burnUpChart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"canvas\", 0);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"#burnUpChart[_ngcontent-%COMP%] {\\n  position: relative;\\n  top: 30px;\\n  height: 400px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}