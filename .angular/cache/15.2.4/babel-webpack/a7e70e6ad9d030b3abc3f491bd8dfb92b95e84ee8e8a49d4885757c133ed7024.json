{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var sprintData = [{\n      idSprint: 1,\n      effort: 20,\n      dateDebut: new Date('2023-01-01'),\n      dateFin: new Date('2023-01-14')\n    }, {\n      idSprint: 2,\n      effort: 30,\n      dateDebut: new Date('2023-01-15'),\n      dateFin: new Date('2023-01-28')\n    }, {\n      idSprint: 3,\n      effort: 40,\n      dateDebut: new Date('2023-01-29'),\n      dateFin: new Date('2023-02-11')\n    }, {\n      idSprint: 4,\n      effort: 35,\n      dateDebut: new Date('2023-02-12'),\n      dateFin: new Date('2023-02-25')\n    }, {\n      idSprint: 5,\n      effort: 45,\n      dateDebut: new Date('2023-02-26'),\n      dateFin: new Date('2023-03-11')\n    }, {\n      idSprint: 6,\n      effort: 50,\n      dateDebut: new Date('2023-03-12'),\n      dateFin: new Date('2023-03-25')\n    }];\n    var sprintVelocities = [{\n      idSprint: 1,\n      velocity: 18\n    }, {\n      idSprint: 2,\n      velocity: 30\n    }, {\n      idSprint: 3,\n      velocity: 35\n    }, {\n      idSprint: 4,\n      velocity: 33\n    }, {\n      idSprint: 5,\n      velocity: 40\n    }, {\n      idSprint: 6,\n      velocity: 45\n    }];\n    var labels = sprintData.map(function (sprint) {\n      return \"Sprint \".concat(sprint.idSprint);\n    });\n    var velocities = sprintVelocities.map(function (sprint) {\n      return sprint.velocity;\n    });\n    var startDate = sprintData[0].dateDebut;\n    var endDate = sprintData[sprintData.length - 1].dateFin;\n    var totalEffort = sprintData.reduce(function (sum, sprint) {\n      return sum + sprint.effort;\n    }, 0);\n    var ctx = document.getElementById('burn-up-chart');\n    var chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Effort',\n          data: this.calculateEffortData(sprintData),\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'Scope',\n          data: this.calculateScopeData(sprintData, startDate, endDate),\n          borderColor: 'green',\n          fill: false\n        }, {\n          label: 'Target',\n          data: this.calculateTargetData(velocities, totalEffort, startDate, endDate),\n          borderColor: 'red',\n          fill: false\n        }]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: false,\n              maxRotation: 90,\n              minRotation: 90\n            }\n          }]\n        }\n      }\n    });\n  };\n  // Calcule les données d'effort pour chaque sprint\n  CourbesComponent.prototype.calculateEffortData = function (sprintData) {\n    var accumulatedEffort = 0;\n    return sprintData.map(function (sprint) {\n      accumulatedEffort += sprint.effort;\n      return accumulatedEffort;\n    });\n  };\n  // Calcule les données de portée pour chaque sprint\n  CourbesComponent.prototype.calculateScopeData = function (sprintData, startDate, endDate) {\n    var currentDate = new Date(startDate);\n    var accumulatedEffort = 0;\n    var scopeData = [];\n    while (currentDate <= endDate) {\n      var sprint = sprintData.find(function (sprint) {\n        return currentDate >= sprint.dateDebut && currentDate <= sprint.dateFin;\n      });\n      if (sprint) {\n        accumulatedEffort += sprint.effort;\n      }\n      scopeData.push(accumulatedEffort);\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return scopeData;\n  };\n  // Calcule les données de cible pour chaque sprint\n  CourbesComponent.prototype.calculateTargetData = function (sprintVelocities, totalEffort, startDate, endDate) {\n    var targetEfforts = [];\n    var accumulatedEffort = 0;\n    var currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n      var sprintVelocity = sprintVelocities.find(function (sprint) {\n        return currentDate >= sprint.dateDebut && currentDate <= sprint.dateFin;\n      });\n      if (sprintVelocity) {\n        var targetEffort = accumulatedEffort + sprintVelocity.velocity;\n        targetEfforts.push(targetEffort);\n        accumulatedEffort = targetEffort;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    targetEfforts.push(totalEffort);\n    return targetEfforts;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"chart-container\", 2, \"position\", \"relative\", \"top\", \"50px\"], [\"id\", \"burn-up-chart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}