{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ElementRef } from \"@angular/core\";\nimport { Chart } from 'chart.js';\nimport { HistoireTicketService } from \"src/app/service/histoire-ticket.service\";\nimport { ProductBacklogService } from \"src/app/service/product-backlog.service\";\nimport { ProjetServiceService } from \"src/app/service/projet-service.service\";\nimport { SprintService } from \"src/app/service/sprint.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nimport * as i5 from \"@angular/common\";\nvar _c0 = [\"myChart\"];\nvar _c1 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\nfunction DashboardComponent_div_13_label_13_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 16);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_13_label_13_Template_label_click_0_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r7);\n      var i_r5 = restoredCtx.index;\n      var ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.onSprintSelected(i_r5));\n    });\n    i0.ɵɵelement(1, \"input\", 17);\n    i0.ɵɵelementStart(2, \"span\", 18);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 19);\n    i0.ɵɵelement(5, \"i\", 20);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    var i_r5 = ctx.index;\n    var ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c1, i_r5 === ctx_r2.sprintSelectedIndex));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", i_r5 === ctx_r2.sprintSelectedIndex);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Sprint \", i_r5 + 1, \" \");\n  }\n}\nfunction DashboardComponent_div_13_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"canvas\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var sprint_r8 = ctx.$implicit;\n    var i_r9 = ctx.index;\n    var ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"canvas-\", sprint_r8.id, \"\");\n    i0.ɵɵproperty(\"hidden\", ctx_r3.sprintSelectedIndex !== i_r9);\n  }\n}\nfunction DashboardComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"div\", 1)(5, \"div\", 5)(6, \"h5\", 7);\n    i0.ɵɵelement(7, \"i\", 11);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵpipe(10, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\", 12)(12, \"div\", 13);\n    i0.ɵɵtemplate(13, DashboardComponent_div_13_label_13_Template, 6, 5, \"label\", 14);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵtemplate(14, DashboardComponent_div_13_div_14_Template, 2, 2, \"div\", 15);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(9, 4, ctx_r1.sprints[ctx_r1.sprintSelectedIndex].dateLancement), \" - \", i0.ɵɵpipeBind1(10, 6, ctx_r1.sprints[ctx_r1.sprintSelectedIndex].dateFin), \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.sprints);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.sprints);\n  }\n}\nvar DashboardComponent = /** @class */function () {\n  function DashboardComponent(sprintService, productBacklogService, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.clicked = true;\n    this.clicked1 = false;\n    this.clicked2 = false;\n    this.tickets = [];\n    this.sprints = [];\n  }\n  DashboardComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.productBacklogService.getProductBacklogByIdProjet(this.projetService.getProjetByIdFromLocalStorage()).subscribe(function (data) {\n      var productBacklog = data;\n      localStorage.setItem('productBacklogCourant', JSON.stringify(productBacklog));\n    }, function (error) {\n      console.log('Une erreur s\\'est produite lors de la récupération du product backlog : ', error);\n    });\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      if (sprints.length > 0) {\n        _this.sprintSelectedIndex = 0;\n        _this.sprints = sprints;\n        // Générer un graphique Burn Down pour chaque sprint\n        if (_this.sprints.length != 0) {\n          var _loop_1 = function (i) {\n            var sprint = _this.sprints[i];\n            _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n              // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n              var labels = [];\n              var data = [];\n              var remainingEffort = sprint.velocite;\n              labels.push(sprint.dateLancement);\n              data.push(remainingEffort);\n              for (var j = 0; j < tickets.length; j++) {\n                remainingEffort -= tickets[j].effort;\n                labels.push(tickets[j].dateFin);\n                data.push(remainingEffort);\n              }\n              labels.push(sprint.dateFin);\n              data.push(0);\n              var chart = new Chart(\"canvas-\".concat(sprint.id), {\n                type: 'line',\n                data: {\n                  labels: labels,\n                  datasets: [{\n                    label: 'Effort restant',\n                    data: data,\n                    borderColor: 'orange',\n                    fill: false\n                  }, {\n                    label: 'Tendance idéale',\n                    data: _this.generateIdealTrend(sprint),\n                    borderColor: '#00d6b4',\n                    fill: false\n                  }]\n                },\n                options: {\n                  title: {\n                    display: true,\n                    text: \"Burn Down Chart\"\n                  },\n                  responsive: true,\n                  scales: {\n                    xAxes: [{\n                      type: 'time',\n                      time: {\n                        unit: 'day',\n                        tooltipFormat: 'll'\n                      },\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Jours de sprint'\n                      },\n                      ticks: {\n                        beginAtZero: true,\n                        stepSize: 1\n                      }\n                    }],\n                    yAxes: [{\n                      ticks: {\n                        beginAtZero: true,\n                        stepSize: 1\n                      },\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Effort restant (points)'\n                      }\n                    }]\n                  }\n                }\n              });\n            });\n          };\n          for (var i = 0; i < _this.sprints.length; i++) {\n            _loop_1(i);\n          }\n        }\n      }\n    });\n    // var chart_labels = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n    // this.datasets = [\n    //   [100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100],\n    //   [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120],\n    //   [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]\n    // ];\n    // this.data = this.datasets[0];\n    // this.canvas = document.getElementById(\"chartBig1\");\n    // this.ctx = this.canvas.getContext(\"2d\");\n    // var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n    // gradientStroke.addColorStop(1, 'rgba(233,32,16,0.2)');\n    // gradientStroke.addColorStop(0.4, 'rgba(233,32,16,0.0)');\n    // gradientStroke.addColorStop(0, 'rgba(233,32,16,0)'); //red colors\n    // var config = {\n    //   type: 'line',\n    //   data: {\n    //     datasets: [{\n    //       fill: true,\n    //       backgroundColor: gradientStroke,\n    //       borderColor: '#ec250d',\n    //       borderWidth: 2,\n    //       borderDash: [],\n    //       borderDashOffset: 0.0,\n    //       pointBackgroundColor: '#ec250d',\n    //       pointBorderColor: 'rgba(255,255,255,0)',\n    //       pointHoverBackgroundColor: '#ec250d',\n    //       pointBorderWidth: 20,\n    //       pointHoverRadius: 4,\n    //       pointHoverBorderWidth: 15,\n    //       pointRadius: 4,\n    //       data: this.data,\n    //     }]\n    //   },\n    //   options: gradientChartOptionsConfigurationWithTooltipRed\n    // };\n    // this.myChartData = new Chart(this.ctx, config);\n    //Pour la deuxième courbe\n    this.histoireTicketService.getListHistoireTicketByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.tickets = data;\n      console.log(_this.tickets);\n    }, function (error) {\n      console.log(error);\n    });\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      if (data.length > 0) {\n        _this.sprintsProjet = data;\n        console.log(_this.sprintsProjet);\n      } else {\n        console.log('Pas de sprints !');\n      }\n      var myChart = new Chart(_this.myChart.nativeElement.getContext('2d'), {\n        type: 'line',\n        data: _this.getChartData(),\n        options: _this.getChartOptions()\n      });\n    }, function (error) {\n      console.log(error);\n    });\n  };\n  DashboardComponent.prototype.onSprintSelected = function (index) {\n    if (this.sprints && this.sprints.length > 0) {\n      this.sprintSelectedIndex = index;\n    }\n  };\n  DashboardComponent.prototype.updateOptions = function () {\n    this.myChartData.data.datasets[0].data = this.data;\n    this.myChartData.update();\n  };\n  // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  DashboardComponent.prototype.generateIdealTrend = function (sprint) {\n    var idealTrend = [];\n    idealTrend.push({\n      x: sprint.dateLancement,\n      y: sprint.velocite\n    });\n    idealTrend.push({\n      x: sprint.dateFin,\n      y: 0\n    });\n    return idealTrend;\n  };\n  //Pour la deuxième courbe\n  DashboardComponent.prototype.getChartData = function () {\n    var labels = this.sprintsProjet.map(function (sprint) {\n      return 'sp' + sprint.id;\n    });\n    var data = {\n      labels: labels,\n      datasets: [{\n        label: 'Effort terminé',\n        data: this.getScopeCreepData(),\n        fill: true,\n        borderColor: 'red'\n      }, {\n        label: 'Effort planifié',\n        data: this.getEffortPlanifieData(),\n        fill: false,\n        borderColor: 'green'\n      }]\n    };\n    return data;\n  };\n  DashboardComponent.prototype.getScopeCreepData = function () {\n    var e_1, _a;\n    var scopeCreepData = [];\n    var scopeCreepTotal = 0;\n    var _loop_2 = function (sprint) {\n      var userStoriesInSprint = this_1.tickets.filter(function (us) {\n        return us.sprintId === sprint.id;\n      });\n      var scopeCreepInSprint = userStoriesInSprint.reduce(function (acc, us) {\n        return acc + us.effort * (us.status === 'TERMINE' ? 1 : 0);\n      }, 0);\n      scopeCreepTotal = scopeCreepTotal + scopeCreepInSprint;\n      scopeCreepData.push(scopeCreepTotal);\n    };\n    var this_1 = this;\n    try {\n      for (var _b = __values(this.sprintsProjet), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sprint = _c.value;\n        _loop_2(sprint);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return scopeCreepData;\n  };\n  DashboardComponent.prototype.getEffortPlanifieData = function () {\n    var e_2, _a;\n    if (this.sprintsProjet && this.sprintsProjet.length > 0) {\n      var effortPlanifieData = [];\n      var effortPlanifieTotal = 0;\n      try {\n        for (var _b = __values(this.sprintsProjet), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var sprint = _c.value;\n          effortPlanifieTotal += sprint.velocite;\n          effortPlanifieData.push(effortPlanifieTotal);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      return effortPlanifieData;\n    }\n  };\n  DashboardComponent.prototype.getChartOptions = function () {\n    return {\n      responsive: true,\n      tooltips: {\n        backgroundColor: '#f5f5f5',\n        titleFontColor: '#333',\n        bodyFontColor: '#666',\n        bodySpacing: 4,\n        xPadding: 14,\n        mode: \"nearest\",\n        intersect: 0,\n        position: \"nearest\"\n      },\n      title: {\n        display: true,\n        text: 'Burn-up chart'\n      },\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Sprints'\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Efforts (en points )'\n          },\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    };\n  };\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    viewQuery: function DashboardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    decls: 14,\n    vars: 1,\n    consts: [[1, \"content\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\", \"card-chart\"], [1, \"card-header\"], [1, \"col-sm-6\", \"text-left\"], [1, \"card-title\"], [1, \"card-category\"], [1, \"card-body\"], [\"myChart\", \"\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"fas\", \"fa-calendar-alt\"], [1, \"col-sm-6\"], [\"data-toggle\", \"buttons\", 1, \"btn-group\", \"btn-group-toggle\", \"float-right\"], [\"class\", \"btn btn-sm btn-secondary btn-simple\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-sm\", \"btn-secondary\", \"btn-simple\", 3, \"ngClass\", \"click\"], [\"type\", \"radio\", \"name\", \"options\", 3, \"checked\"], [1, \"d-none\", \"d-sm-block\", \"d-md-block\", \"d-lg-block\", \"d-xl-block\"], [1, \"d-block\", \"d-sm-none\"], [1, \"tim-icons\", \"icon-single-02\"], [3, \"id\", \"hidden\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 1)(6, \"div\", 5)(7, \"h2\", 6);\n        i0.ɵɵtext(8, \"Performance\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"h5\", 7);\n        i0.ɵɵtext(10, \"Total Shipments\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(11, \"canvas\", 8, 9);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(13, DashboardComponent_div_13_Template, 15, 8, \"div\", 10);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngIf\", (ctx.sprints == null ? null : ctx.sprints.length) != 0);\n      }\n    },\n    dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i5.DatePipe]\n  });\n  return DashboardComponent;\n}();\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}