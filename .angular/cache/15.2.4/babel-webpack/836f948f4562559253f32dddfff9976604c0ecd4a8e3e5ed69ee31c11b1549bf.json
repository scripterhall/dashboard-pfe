{"ast":null,"code":"import * as i0 from \"@angular/core\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent() {}\n  CourbesComponent.prototype.ngOnInit = function () {\n    // Remplacer ces valeurs par les données de votre sprint et les tickets\n    this.sprintId = 1;\n    this.startDate = new Date(\"2023-04-01\");\n    this.endDate = new Date(\"2023-04-15\");\n    this.velocity = 20;\n    this.tickets = [{\n      id: 1,\n      title: \"Histoire 1\",\n      startDate: new Date(\"2023-04-01\"),\n      endDate: new Date(\"2023-04-03\"),\n      effort: 10\n    }, {\n      id: 2,\n      title: \"Histoire 2\",\n      startDate: new Date(\"2023-04-02\"),\n      endDate: new Date(\"2023-04-06\"),\n      effort: 15\n    }, {\n      id: 3,\n      title: \"Histoire 3\",\n      startDate: new Date(\"2023-04-04\"),\n      endDate: new Date(\"2023-04-08\"),\n      effort: 5\n    }, {\n      id: 4,\n      title: \"Histoire 4\",\n      startDate: new Date(\"2023-04-06\"),\n      endDate: new Date(\"2023-04-10\"),\n      effort: 20\n    }, {\n      id: 5,\n      title: \"Histoire 5\",\n      startDate: new Date(\"2023-04-09\"),\n      endDate: new Date(\"2023-04-12\"),\n      effort: 5\n    }];\n    // Appeler la fonction pour générer le burn down chart\n    this.generateBurnDownChart();\n  };\n  CourbesComponent.prototype.generateBurnDownChart = function () {\n    var daysInSprint = this.getDaysInSprint();\n    var idealBurndown = this.getIdealBurndown(daysInSprint, this.velocity);\n    var actualBurndown = this.getActualBurndown(daysInSprint);\n    // Générer le graphique en utilisant les données générées\n    // Vous pouvez utiliser une bibliothèque de graphiques telle que Chart.js pour générer le graphique\n    // Ensuite, vous pouvez utiliser les données générées pour remplir le graphique\n  };\n\n  CourbesComponent.prototype.getDaysInSprint = function () {\n    var millisecondsInDay = 1000 * 60 * 60 * 24;\n    var days = Math.round((this.endDate.getTime() - this.startDate.getTime()) / millisecondsInDay) + 1;\n    return days;\n  };\n  CourbesComponent.prototype.getIdealBurndown = function (daysInSprint, velocity) {\n    var idealBurndown = [];\n    var dailyVelocity = velocity / daysInSprint;\n    var remainingEffort = velocity;\n    for (var i = 0; i < daysInSprint; i++) {\n      idealBurndown.push(remainingEffort);\n      remainingEffort -= dailyVelocity;\n    }\n    idealBurndown.push(0); // Ajouter un point zéro final\n    return idealBurndown;\n  };\n  CourbesComponent.prototype.getActualBurndown = function (daysInSprint) {\n    var actualBurndown = [];\n    var remainingEffort = this.velocity;\n    var startDate = this.startDate;\n    for (var i = 0; i < daysInSprint; i++) {\n      var date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n      var totalEffort = 0;\n      for (var j = 0; j < this.tickets.length; j++) {\n        if (this.tickets[j].startDate <= date && this.tickets[j].endDate >= date) {\n          totalEffort += this.tickets[j].effort;\n        }\n      }\n      remainingEffort -= totalEffort;\n      actualBurndown.push(remainingEffort);\n    }\n    return actualBurndown;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)();\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"chart-container\"], [\"burndownChart\", \"\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}