{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport Chart from 'chart.js';\nimport { HistoireTicketService } from \"src/app/service/histoire-ticket.service\";\nimport { ProductBacklogService } from \"src/app/service/product-backlog.service\";\nimport { SprintService } from \"src/app/service/sprint.service\";\nvar DashboardComponent = /** @class */function () {\n  function DashboardComponent(sprintService, productBacklogService, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.clicked = true;\n    this.clicked1 = false;\n    this.clicked2 = false;\n  }\n  DashboardComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      var _loop_1 = function (i) {\n        var sprint = _this.sprints[i];\n        _this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n          // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n          console.log(tickets);\n          var labels = [];\n          var data = [];\n          var remainingEffort = sprint.velocite;\n          labels.push(sprint.dateLancement);\n          data.push(remainingEffort);\n          for (var j = 0; j < tickets.length; j++) {\n            remainingEffort -= tickets[j].effort;\n            labels.push(tickets[j].dateFin);\n            console.log(tickets[j].dateFin);\n            data.push(remainingEffort);\n          }\n          labels.push(sprint.dateFin);\n          data.push(0);\n          var chart = new Chart(\"canvas-\".concat(sprint.id), {\n            type: 'line',\n            data: {\n              labels: labels,\n              datasets: [{\n                label: 'Effort restant',\n                data: data,\n                borderColor: 'blue',\n                fill: false\n              }, {\n                label: 'Tendance idéale',\n                data: _this.generateIdealTrend(sprint),\n                borderColor: 'green',\n                fill: false\n              }]\n            },\n            options: {\n              title: {\n                display: true,\n                text: \"Burn Down Chart - Sprint \".concat(sprint.id)\n              },\n              scales: {\n                xAxes: [{\n                  type: 'time',\n                  time: {\n                    unit: 'day',\n                    tooltipFormat: 'll'\n                  }\n                }],\n                yAxes: [{\n                  ticks: {\n                    beginAtZero: true,\n                    stepSize: 1\n                  }\n                }]\n              }\n            }\n          });\n        });\n      };\n      // Générer un graphique Burn Down pour chaque sprint\n      for (var i = 0; i < _this.sprints.length; i++) {\n        _loop_1(i);\n      }\n    });\n    var gradientChartOptionsConfigurationWithTooltipRed = {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      tooltips: {\n        backgroundColor: '#f5f5f5',\n        titleFontColor: '#333',\n        bodyFontColor: '#666',\n        bodySpacing: 4,\n        xPadding: 12,\n        mode: \"nearest\",\n        intersect: 0,\n        position: \"nearest\"\n      },\n      responsive: true,\n      scales: {\n        yAxes: [{\n          barPercentage: 1.6,\n          gridLines: {\n            drawBorder: false,\n            color: 'rgba(29,140,248,0.0)',\n            zeroLineColor: \"transparent\"\n          },\n          ticks: {\n            suggestedMin: 60,\n            suggestedMax: 125,\n            padding: 20,\n            fontColor: \"#9a9a9a\"\n          }\n        }],\n        xAxes: [{\n          barPercentage: 1.6,\n          gridLines: {\n            drawBorder: false,\n            color: 'rgba(233,32,16,0.1)',\n            zeroLineColor: \"transparent\"\n          },\n          ticks: {\n            padding: 20,\n            fontColor: \"#9a9a9a\"\n          }\n        }]\n      }\n    };\n    var chart_labels = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n    this.datasets = [[100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100], [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120], [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]];\n    this.data = this.datasets[0];\n    this.canvas = document.getElementById(\"chartBig1\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n    gradientStroke.addColorStop(1, 'rgba(233,32,16,0.2)');\n    gradientStroke.addColorStop(0.4, 'rgba(233,32,16,0.0)');\n    gradientStroke.addColorStop(0, 'rgba(233,32,16,0)'); //red colors\n    var config = {\n      type: 'line',\n      data: {\n        labels: chart_labels,\n        datasets: [{\n          label: \"My First dataset\",\n          fill: true,\n          backgroundColor: gradientStroke,\n          borderColor: '#ec250d',\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: '#ec250d',\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: '#ec250d',\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.data\n        }]\n      },\n      options: gradientChartOptionsConfigurationWithTooltipRed\n    };\n    this.myChartData = new Chart(this.ctx, config);\n  };\n  DashboardComponent.prototype.updateOptions = function () {\n    this.myChartData.data.datasets[0].data = this.data;\n    this.myChartData.update();\n  };\n  // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  DashboardComponent.prototype.generateIdealTrend = function (sprint) {\n    var idealTrend = [];\n    idealTrend.push({\n      x: sprint.dateLancement,\n      y: sprint.velocite\n    });\n    idealTrend.push({\n      x: sprint.dateFin,\n      y: 0\n    });\n    return idealTrend;\n  };\n  DashboardComponent = __decorate([Component({\n    selector: \"app-dashboard\",\n    templateUrl: \"dashboard.component.html\"\n  }), __metadata(\"design:paramtypes\", [SprintService, ProductBacklogService, HistoireTicketService])], DashboardComponent);\n  return DashboardComponent;\n}();\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}