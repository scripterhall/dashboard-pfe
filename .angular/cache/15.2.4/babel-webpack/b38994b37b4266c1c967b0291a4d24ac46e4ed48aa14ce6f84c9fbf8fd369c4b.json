{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/histoire-ticket.service\";\nimport * as i3 from \"src/app/service/product-backlog.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction CourbesComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var sprint_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", sprint_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\"\", sprint_r1.id, \" - \", sprint_r1.dateLancement, \" au \", sprint_r1.dateFin, \"\");\n  }\n}\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, ticketHistoireService, productBacklogService) {\n    this.sprintService = sprintService;\n    this.ticketHistoireService = ticketHistoireService;\n    this.productBacklogService = productBacklogService;\n    this.sprints = [];\n    this.selectedSprint = null;\n    this.ticketHistoires = [];\n    this.chart = null;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // Récupérer les données des tickets histoire pour un sprint donné\n    getHistoireTicketBySprintId(idSprint, number);\n    {\n      return this.http.get(\"\".concat(url1, \"/sprint/\") + idSprint);\n    }\n    // Récupérer les données du sprint\n    getListSprintsByProductBacklog(productBacklogId, number);\n    {\n      return this.http.get(\"\".concat(url1, \"/productBacklog/\") + productBacklogId);\n    }\n    // Créer un graphique en barres pour chaque sprint\n    this.getListSprintsByProductBacklog(productBacklogId).subscribe(function (sprints) {\n      sprints.forEach(function (sprint) {\n        // Récupérer les données des tickets histoire pour ce sprint\n        _this.getHistoireTicketBySprintId(sprint.idSprint).subscribe(function (tickets) {\n          // Calculer la vélocité planifiée pour chaque jour\n          var sprintLength = sprint.dateFin.getTime() - sprint.dateLancement.getTime();\n          var velocityPerDay = sprint.velocite / (sprintLength / (1000 * 3600 * 24));\n          var plannedVelocityData = [];\n          var currentDate = new Date(sprint.dateLancement);\n          while (currentDate <= sprint.dateFin) {\n            plannedVelocityData.push(velocityPerDay);\n            currentDate.setDate(currentDate.getDate() + 1);\n          }\n          // Calculer la vélocité réelle pour chaque jour\n          var actualVelocityData = [];\n          var _loop_1 = function (i) {\n            var date = new Date(sprint.dateLancement);\n            date.setDate(date.getDate() + i);\n            var totalEffort = 0;\n            tickets.forEach(function (ticket) {\n              if (ticket.idSprint === sprint.idSprint && ticket.effort && ticket.dateLancement <= date) {\n                totalEffort += ticket.effort;\n              }\n            });\n            var actualVelocity = sprint.velocite - totalEffort;\n            actualVelocityData.push(actualVelocity);\n          };\n          for (var i = 0; i < plannedVelocityData.length; i++) {\n            _loop_1(i);\n          }\n          // Créer le graphique en barres\n          var chartId = 'sprint-chart-' + sprint.idSprint;\n          var canvas = document.getElementById(chartId);\n          var ctx = canvas.getContext('2d');\n          var data = {\n            labels: plannedVelocityData.map(function (_, i) {\n              return (i + 1).toString();\n            }),\n            datasets: [{\n              label: 'Vélocité planifiée',\n              data: plannedVelocityData,\n              backgroundColor: 'rgba(54, 162, 235, 0.5)',\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 1\n            }, {\n              label: 'Vélocité réelle',\n              data: actualVelocityData,\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 1\n            }]\n          };\n          var options = {\n            scales: {\n              yAxes: [{\n                ticks: {\n                  // Afficher les ticks de l'axe y en entiers\n                  beginAtZero: true,\n                  precision: 0\n                }\n              }]\n            }\n          };\n        });\n      });\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.HistoireTicketService), i0.ɵɵdirectiveInject(i3.ProductBacklogService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 6,\n    vars: 2,\n    consts: [[1, \"form-group\"], [\"for\", \"sprintList\"], [\"id\", \"sprintList\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"sprintDownChart\", \"width\", \"800\", \"height\", \"400\"], [3, \"value\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n        i0.ɵɵtext(2, \"S\\u00E9lectionnez un sprint :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"select\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function CourbesComponent_Template_select_ngModelChange_3_listener($event) {\n          return ctx.selectedSprint = $event;\n        })(\"ngModelChange\", function CourbesComponent_Template_select_ngModelChange_3_listener($event) {\n          return ctx.onSelectSprint($event);\n        });\n        i0.ɵɵtemplate(4, CourbesComponent_option_4_Template, 2, 4, \"option\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(5, \"canvas\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedSprint);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sprints);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgModel]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}