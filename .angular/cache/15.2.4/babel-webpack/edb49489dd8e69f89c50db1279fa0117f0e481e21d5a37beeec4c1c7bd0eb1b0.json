{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // Récupérer la liste de sprints pour le produit backlog\n    this.http.get('url/productBacklog/1').subscribe(function (data) {\n      _this.sprints = data;\n      // Initialiser les tableaux pour chaque état de ticket\n      _this.doneTickets = new Array(_this.sprints.length).fill(0);\n      _this.todoTickets = new Array(_this.sprints.length).fill(0);\n      _this.scopeTickets = new Array(_this.sprints.length).fill(0);\n      var _loop_1 = function (i) {\n        _this.http.get('url/sprint/' + _this.sprints[i].idSprint).subscribe(function (data) {\n          // Stocker les données des tickets dans les tableaux appropriés en fonction de leur état\n          for (var j = 0; j < data.length; j++) {\n            if (data[j].etat === 'DONE') {\n              _this.doneTickets[i] += data[j].effort;\n            } else if (data[j].etat === 'TODO') {\n              _this.todoTickets[i] += data[j].effort;\n            } else if (data[j].etat === 'SCOPE') {\n              _this.scopeTickets[i] += data[j].effort;\n            }\n          }\n          // Dessiner le graphique après avoir récupéré toutes les données\n          if (i === _this.sprints.length - 1) {\n            _this.drawChart();\n          }\n        });\n      };\n      // Récupérer les tickets histoire pour chaque sprint\n      for (var i = 0; i < _this.sprints.length; i++) {\n        _loop_1(i);\n      }\n    });\n  };\n  CourbesComponent.prototype.drawChart = function () {\n    var _this = this;\n    this.getListSprintsByProductBacklog(this.productBacklogId).subscribe(function (sprints) {\n      var sprintNames = sprints.map(function (sprint) {\n        return \"sp\".concat(sprint.idSprint);\n      });\n      var doneCumulative = [];\n      var todoCumulative = [];\n      var scopeCumulative = [];\n      var doneTotal = 0;\n      var todoTotal = 0;\n      var scopeTotal = 0;\n      sprints.forEach(function (sprint) {\n        _this.getHistoireTicketBySprintId(sprint.idSprint).subscribe(function (tickets) {\n          var sprintDone = tickets.filter(function (ticket) {\n            return ticket.etat === 'Done';\n          }).reduce(function (total, ticket) {\n            return total + ticket.effort;\n          }, 0);\n          var sprintTodo = tickets.filter(function (ticket) {\n            return ticket.etat === 'TODO';\n          }).reduce(function (total, ticket) {\n            return total + ticket.effort;\n          }, 0);\n          var sprintScope = tickets.filter(function (ticket) {\n            return ticket.etat === 'SCOPE';\n          }).reduce(function (total, ticket) {\n            return total + ticket.effort;\n          }, 0);\n          doneTotal += sprintDone;\n          todoTotal += sprintTodo;\n          scopeTotal += sprintScope;\n          doneCumulative.push(doneTotal);\n          todoCumulative.push(todoTotal);\n          scopeCumulative.push(scopeTotal);\n          var data = {\n            labels: sprintNames,\n            datasets: [{\n              label: 'DONE',\n              data: doneCumulative,\n              borderColor: 'green',\n              fill: false\n            }, {\n              label: 'TODO',\n              data: todoCumulative,\n              borderColor: 'red',\n              fill: false\n            }, {\n              label: 'SCOPE',\n              data: scopeCumulative,\n              borderColor: 'blue',\n              fill: false\n            }]\n          };\n          var options = {\n            scales: {\n              yAxes: [{\n                ticks: {\n                  beginAtZero: true\n                }\n              }]\n            }\n          };\n          var myChart = new Chart('myChart', {\n            type: 'line',\n            data: data,\n            options: options\n          });\n        });\n      });\n    });\n  };\n  // Fonction pour calculer la somme cumulée d'un tableau de nombres\n  CourbesComponent.prototype.cumulativeSum = function (arr) {\n    var result = [];\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      result.push(sum);\n    }\n    return result;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"burn-up-chart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}