{"ast":null,"code":"import { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    // propriétés pour stocker les données du burn up chart\n    this.burnUpData = [];\n    this.plannedData = [];\n    // initialiser les données des sprints et des tickets d'histoire à partir de votre source de données\n    this.sprints = [{\n      id: 1,\n      velocity: 10,\n      dateStart: new Date('2023-04-01'),\n      dateEnd: new Date('2023-04-07')\n    }, {\n      id: 2,\n      velocity: 15,\n      dateStart: new Date('2023-04-08'),\n      dateEnd: new Date('2023-04-14')\n    }, {\n      id: 3,\n      velocity: 20,\n      dateStart: new Date('2023-04-15'),\n      dateEnd: new Date('2023-04-21')\n    }];\n    this.stories = [{\n      id: 1,\n      sprintId: 1,\n      effort: 5,\n      dateStart: new Date('2023-04-01'),\n      dateEnd: new Date('2023-04-03'),\n      status: 'done'\n    }, {\n      id: 2,\n      sprintId: 1,\n      effort: 7,\n      dateStart: new Date('2023-04-02'),\n      dateEnd: new Date('2023-04-05'),\n      status: 'done'\n    }, {\n      id: 3,\n      sprintId: 1,\n      effort: 3,\n      dateStart: new Date('2023-04-03'),\n      dateEnd: new Date('2023-04-06'),\n      status: 'done'\n    }, {\n      id: 4,\n      sprintId: 1,\n      effort: 5,\n      dateStart: new Date('2023-04-04'),\n      dateEnd: new Date('2023-04-07'),\n      status: 'todo'\n    }, {\n      id: 5,\n      sprintId: 2,\n      effort: 10,\n      dateStart: new Date('2023-04-08'),\n      dateEnd: new Date('2023-04-11'),\n      status: 'done'\n    }, {\n      id: 6,\n      sprintId: 2,\n      effort: 8,\n      dateStart: new Date('2023-04-09'),\n      dateEnd: new Date('2023-04-13'),\n      status: 'done'\n    }, {\n      id: 7,\n      sprintId: 2,\n      effort: 7,\n      dateStart: new Date('2023-04-10'),\n      dateEnd: new Date('2023-04-14'),\n      status: 'done'\n    }, {\n      id: 8,\n      sprintId: 2,\n      effort: 5,\n      dateStart: new Date('2023-04-11'),\n      dateEnd: new Date('2023-04-14'),\n      status: 'todo'\n    }, {\n      id: 9,\n      sprintId: 3,\n      effort: 12,\n      dateStart: new Date('2023-04-15'),\n      dateEnd: new Date('2023-04-18'),\n      status: 'done'\n    }, {\n      id: 11,\n      sprintId: 3,\n      effort: 8,\n      dateStart: new Date('2023-04-16'),\n      dateEnd: new Date('2023-04-20'),\n      status: 'done'\n    }, {\n      id: 12,\n      sprintId: 3,\n      effort: 6,\n      dateStart: new Date('2023-04-17'),\n      dateEnd: new Date('2023-04-21'),\n      status: 'todo'\n    }];\n  }\n  // méthode pour calculer les données du burn up chart\n  CourbesComponent.prototype.calculateBurnUpData = function () {\n    // initialiser les données du burn up chart avec les données du premier sprint\n    var sprint = this.sprints[0];\n    this.burnUpData.push({\n      x: sprint.dateStart,\n      y: 0\n    });\n    this.plannedData.push({\n      x: sprint.dateStart,\n      y: 0\n    });\n    var totalEffort = 0;\n    // parcourir tous les sprints\n    for (var i = 0; i < this.sprints.length; i++) {\n      sprint = this.sprints[i];\n      totalEffort += this.getTotalEffortForSprint(sprint);\n      // ajouter les données réelles et prévues du burn up chart pour ce sprint\n      this.burnUpData.push({\n        x: sprint.dateEnd,\n        y: totalEffort\n      });\n      this.plannedData.push({\n        x: sprint.dateEnd,\n        y: sprint.velocity * (i + 1)\n      });\n    }\n  };\n  // méthode pour calculer le total de l'effort pour un sprint donné\n  CourbesComponent.prototype.getTotalEffortForSprint = function (sprint) {\n    var totalEffort = 0;\n    // parcourir tous les tickets d'histoire pour ce sprint\n    for (var i = 0; i < this.stories.length; i++) {\n      var story = this.stories[i];\n      if (story.sprintId === sprint.id) {\n        // ajouter l'effort du ticket d'histoire s'il est terminé\n        if (story.status === 'done') {\n          totalEffort += story.effort;\n        }\n      }\n    }\n    return totalEffort;\n  };\n  CourbesComponent.prototype.ngOnInit = function () {\n    this.calculateBurnUpData();\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 0,\n    vars: 0,\n    template: function CourbesComponent_Template(rf, ctx) {}\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}