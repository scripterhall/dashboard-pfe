{"ast":null,"code":"import { Chart } from 'chart.js';\nvar url1 = \"http://localhost:9999/gestion-sprints-service/sprints\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, ticketHistoireService, productBacklogService, http) {\n    this.sprintService = sprintService;\n    this.ticketHistoireService = ticketHistoireService;\n    this.productBacklogService = productBacklogService;\n    this.http = http;\n    this.sprints = [];\n    this.selectedSprint = null;\n    this.ticketHistoires = [];\n    this.chart = null;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // Récupérer les données des tickets histoire pour un sprint donné\n    getHistoireTicketBySprintId(idSprint, number);\n    {\n      return this.http.get(\"\".concat(url1, \"/sprint/\") + idSprint);\n    }\n    // Récupérer les données du sprint\n    getListSprintsByProductBacklog(productBacklogId, number);\n    {\n      return this.http.get(\"\".concat(url1, \"/productBacklog/\") + productBacklogId);\n    }\n    // Créer un graphique en barres pour chaque sprint\n    this.getListSprintsByProductBacklog(productBacklogId).subscribe(function (sprints) {\n      sprints.forEach(function (sprint) {\n        // Récupérer les données des tickets histoire pour ce sprint\n        _this.getHistoireTicketBySprintId(sprint.idSprint).subscribe(function (tickets) {\n          // Calculer la vélocité planifiée pour chaque jour\n          var sprintLength = sprint.dateFin.getTime() - sprint.dateLancement.getTime();\n          var velocityPerDay = sprint.velocite / (sprintLength / (1000 * 3600 * 24));\n          var plannedVelocityData = [];\n          var currentDate = new Date(sprint.dateLancement);\n          while (currentDate <= sprint.dateFin) {\n            plannedVelocityData.push(velocityPerDay);\n            currentDate.setDate(currentDate.getDate() + 1);\n          }\n          // Calculer la vélocité réelle pour chaque jour\n          var actualVelocityData = [];\n          var _loop_1 = function (i) {\n            var date = new Date(sprint.dateLancement);\n            date.setDate(date.getDate() + i);\n            var totalEffort = 0;\n            tickets.forEach(function (ticket) {\n              if (ticket.idSprint === sprint.idSprint && ticket.effort && ticket.dateLancement <= date) {\n                totalEffort += ticket.effort;\n              }\n            });\n            var actualVelocity = sprint.velocite - totalEffort;\n            actualVelocityData.push(actualVelocity);\n          };\n          for (var i = 0; i < plannedVelocityData.length; i++) {\n            _loop_1(i);\n          }\n          // Créer le graphique en barres\n          var chartId = 'sprint-chart-' + sprint.idSprint;\n          var canvas = document.getElementById(chartId);\n          var ctx = canvas.getContext('2d');\n          var data = {\n            labels: plannedVelocityData.map(function (_, i) {\n              return (i + 1).toString();\n            }),\n            datasets: [{\n              label: 'Vélocité planifiée',\n              data: plannedVelocityData,\n              backgroundColor: 'rgba(54, 162, 235, 0.5)',\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 1\n            }, {\n              label: 'Vélocité réelle',\n              data: actualVelocityData,\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 1\n            }]\n          };\n          var options = {\n            scales: {\n              yAxes: [{\n                ticks: {\n                  // Afficher les ticks de l'axe y en entiers\n                  beginAtZero: true,\n                  precision: 0\n                }\n              }]\n            }\n          };\n          var chart = new Chart(ctx, {\n            type: 'bar',\n            data: data,\n            options: options\n          });\n        });\n      });\n    });\n  };\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}