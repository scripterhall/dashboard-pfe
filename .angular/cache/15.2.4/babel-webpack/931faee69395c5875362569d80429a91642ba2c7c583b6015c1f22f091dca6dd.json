{"ast":null,"code":"import Chart from 'chart.js';\nimport * as i0 from \"@angular/core\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent() {\n    // constructor(private sprintService:SprintService,\n    //   private productBacklogService:ProductBacklogService,\n    //   private histoireTicketService:HistoireTicketService) { }\n    //   sprints: Sprint[];\n    //   chart: Chart;\n    //   ngOnInit() {\n    //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n    //       this.sprints = sprints;\n    //       // Générer un graphique Burn Down pour chaque sprint\n    //       for (let i = 0; i < this.sprints.length; i++) {\n    //         const sprint = this.sprints[i];\n    //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n    //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n    //           console.log(tickets);\n    //           const labels = [];\n    //           const data = [];\n    //           let remainingEffort = sprint.velocite;\n    //           labels.push(sprint.dateLancement);\n    //           data.push(remainingEffort);\n    //           for (let j = 0; j < tickets.length; j++) {\n    //             remainingEffort -= tickets[j].effort;\n    //             labels.push(tickets[j].dateFin);\n    //             console.log(tickets[j].dateFin);\n    //             data.push(remainingEffort);\n    //           }\n    //           labels.push(sprint.dateFin);\n    //           data.push(0);\n    //           const chart = new Chart(`canvas-${sprint.id}`, {\n    //             type: 'line',\n    //             data: {\n    //               labels: labels,\n    //               datasets: [\n    //                 {\n    //                   label: 'Effort restant',\n    //                   data: data,\n    //                   borderColor: 'blue',\n    //                   fill: false\n    //                 },\n    //                 {\n    //                   label: 'Tendance idéale',\n    //                   data: this.generateIdealTrend(sprint),\n    //                   borderColor: 'green',\n    //                   fill: false\n    //                 }\n    //               ]\n    //             },\n    //             options: {\n    //               title: {\n    //                 display: true,\n    //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n    //               },\n    //               scales: {\n    //                 xAxes: [{\n    //                   type: 'time',\n    //                   time: {\n    //                     unit: 'day',\n    //                     tooltipFormat: 'll'\n    //                   }\n    //                 }],\n    //                 yAxes: [{\n    //                   ticks: {\n    //                     beginAtZero: true,\n    //                     stepSize: 1\n    //                   }\n    //                 }]\n    //               }\n    //             }\n    //           });\n    //         });\n    //       }\n    //     });\n    //   }\n    // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n    // private generateIdealTrend(sprint: Sprint): any[] {\n    //   const idealTrend = [];\n    //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n    //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n    //   return idealTrend;\n    // }\n    this.sprints = [{\n      velocity: 20,\n      dateLancement: new Date('2023-01-01'),\n      dateFin: new Date('2023-01-14')\n    }, {\n      velocity: 30,\n      dateLancement: new Date('2023-01-15'),\n      dateFin: new Date('2023-01-28')\n    }, {\n      velocity: 40,\n      dateLancement: new Date('2023-01-29'),\n      dateFin: new Date('2023-02-11')\n    }];\n    this.tickets = [{\n      effort: 5,\n      dateDebut: new Date('2023-01-02'),\n      dateFin: new Date('2023-01-07')\n    }, {\n      effort: 10,\n      dateDebut: new Date('2023-01-03'),\n      dateFin: new Date('2023-01-12')\n    }, {\n      effort: 15,\n      dateDebut: new Date('2023-01-16'),\n      dateFin: new Date('2023-01-21')\n    }, {\n      effort: 20,\n      dateDebut: new Date('2023-01-17'),\n      dateFin: new Date('2023-01-26')\n    }, {\n      effort: 25,\n      dateDebut: new Date('2023-01-30'),\n      dateFin: new Date('2023-02-04')\n    }, {\n      effort: 30,\n      dateDebut: new Date('2023-01-31'),\n      dateFin: new Date('2023-02-09')\n    }];\n    this.totalEffort = this.tickets.reduce(function (acc, ticket) {\n      return acc + ticket.effort;\n    }, 0);\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    var data = {\n      labels: this.sprints.map(function (sprint) {\n        return sprint.dateLancement.toLocaleDateString();\n      }),\n      datasets: [{\n        label: 'Effort total',\n        data: this.sprints.map(function (sprint, index) {\n          return _this.getActualEffort(index);\n        }),\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n        borderColor: 'rgba(255, 99, 132, 1)',\n        borderWidth: 1,\n        fill: false\n      }, {\n        label: 'Effort restant',\n        data: this.sprints.map(function (sprint, index) {\n          return _this.getRemainingEffort(index);\n        }),\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 1,\n        fill: false\n      }]\n    };\n    this.chart = new Chart('canvas', {\n      type: 'line',\n      data: data,\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  };\n  CourbesComponent.prototype.getEffortForSprint = function (sprint) {\n    return this.tickets.filter(function (ticket) {\n      return ticket.dateDebut >= sprint.dateLancement && ticket.dateFin <= sprint.dateFin;\n    }).reduce(function (acc, ticket) {\n      return acc + ticket.effort;\n    }, 0);\n  };\n  CourbesComponent.prototype.getActualEffort = function (sprintIndex) {\n    var _this = this;\n    var sprintsToCalculate = this.sprints.slice(0, sprintIndex + 1);\n    return sprintsToCalculate.reduce(function (acc, sprint) {\n      return acc + _this.getEffortForSprint(sprint);\n    }, 0);\n  };\n  CourbesComponent.prototype.getRemainingEffort = function (sprintIndex) {\n    var actualEffort = this.getActualEffort(sprintIndex);\n    return this.totalEffort - actualEffort;\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)();\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"canvas\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    },\n    styles: [\"#canvas[_ngcontent-%COMP%] {\\n  height: 100px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}