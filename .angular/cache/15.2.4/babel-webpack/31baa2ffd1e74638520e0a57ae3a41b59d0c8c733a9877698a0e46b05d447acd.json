{"ast":null,"code":"import Chart from 'chart.js';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  // constructor(private sprintService:SprintService,\n  //   private productBacklogService:ProductBacklogService,\n  //   private histoireTicketService:HistoireTicketService) { }\n  //   sprints: Sprint[];\n  //   chart: Chart;\n  //   ngOnInit() {\n  //     this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe((sprints: Sprint[]) => {\n  //       this.sprints = sprints;\n  //       // Générer un graphique Burn Down pour chaque sprint\n  //       for (let i = 0; i < this.sprints.length; i++) {\n  //         const sprint = this.sprints[i];\n  //         this.histoireTicketService.getHistoireTicketBySprintId(sprint.id).subscribe((tickets: TicketHistoire[]) => {\n  //           // Générer un graphique Burn Down pour ce sprint et sa liste de tickets associée\n  //           console.log(tickets);\n  //           const labels = [];\n  //           const data = [];\n  //           let remainingEffort = sprint.velocite;\n  //           labels.push(sprint.dateLancement);\n  //           data.push(remainingEffort);\n  //           for (let j = 0; j < tickets.length; j++) {\n  //             remainingEffort -= tickets[j].effort;\n  //             labels.push(tickets[j].dateFin);\n  //             console.log(tickets[j].dateFin);\n  //             data.push(remainingEffort);\n  //           }\n  //           labels.push(sprint.dateFin);\n  //           data.push(0);\n  //           const chart = new Chart(`canvas-${sprint.id}`, {\n  //             type: 'line',\n  //             data: {\n  //               labels: labels,\n  //               datasets: [\n  //                 {\n  //                   label: 'Effort restant',\n  //                   data: data,\n  //                   borderColor: 'blue',\n  //                   fill: false\n  //                 },\n  //                 {\n  //                   label: 'Tendance idéale',\n  //                   data: this.generateIdealTrend(sprint),\n  //                   borderColor: 'green',\n  //                   fill: false\n  //                 }\n  //               ]\n  //             },\n  //             options: {\n  //               title: {\n  //                 display: true,\n  //                 text: `Burn Down Chart - Sprint ${sprint.id}`\n  //               },\n  //               scales: {\n  //                 xAxes: [{\n  //                   type: 'time',\n  //                   time: {\n  //                     unit: 'day',\n  //                     tooltipFormat: 'll'\n  //                   }\n  //                 }],\n  //                 yAxes: [{\n  //                   ticks: {\n  //                     beginAtZero: true,\n  //                     stepSize: 1\n  //                   }\n  //                 }]\n  //               }\n  //             }\n  //           });\n  //         });\n  //       }\n  //     });\n  //   }\n  // // Générer la tendance idéale (droite qui part de la vélocité et atteint 0 à la fin du sprint)\n  // private generateIdealTrend(sprint: Sprint): any[] {\n  //   const idealTrend = [];\n  //   idealTrend.push({ x: sprint.dateLancement, y: sprint.velocite });\n  //   idealTrend.push({ x: sprint.dateFin, y: 0 });\n  //   return idealTrend;\n  // }\n  function CourbesComponent(sprintService, productBacklogservice, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogservice = productBacklogservice;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      _this.sprints = sprints;\n      _this.getSprintTickets();\n    });\n  };\n  CourbesComponent.prototype.getSprintTickets = function () {\n    var _this = this;\n    // Pour chaque sprint, récupérer la liste des tickets d'histoire associés\n    this.sprints.forEach(function (sprint) {\n      _this.sprintService.getListSprintsByProductBacklog(_this.productBacklogservice.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n        _this.sprints = sprints;\n      });\n      _this.http.get(\"\".concat(url1, \"/sprint/\") + sprint.idSprint).subscribe(function (data) {\n        sprint.ticketsHistoire = data;\n        // Si tous les sprints ont été traités, dessiner le graphique\n        if (_this.sprints.every(function (s) {\n          return s.ticketsHistoire != null;\n        })) {\n          _this.drawChart();\n        }\n      });\n    });\n  };\n  CourbesComponent.prototype.drawChart = function () {\n    // Initialiser les tableaux de données pour les courbes DONE, TODO et SCOPE\n    var doneData = [];\n    var todoData = [];\n    var scopeData = [];\n    var sprintLabels = [];\n    // Pour chaque sprint, calculer la somme des efforts pour les tickets DONE, TODO et SCOPE\n    var doneSum = 0;\n    var todoSum = 0;\n    var scopeSum = 0;\n    this.sprints.forEach(function (sprint) {\n      var sprintDoneSum = 0;\n      var sprintTodoSum = 0;\n      var sprintScopeSum = 0;\n      sprint.ticketsHistoire.forEach(function (ticket) {\n        if (ticket.etat === 'DONE') {\n          sprintDoneSum += ticket.effort;\n        } else if (ticket.etat === 'TODO') {\n          sprintTodoSum += ticket.effort;\n        } else if (ticket.etat === 'SCOPE') {\n          sprintScopeSum += ticket.effort;\n        }\n      });\n      doneSum += sprintDoneSum;\n      todoSum += sprintTodoSum;\n      scopeSum += sprintScopeSum;\n      doneData.push(doneSum);\n      todoData.push(todoSum);\n      scopeData.push(scopeSum);\n      sprintLabels.push(\"sp\".concat(sprint.idSprint));\n    });\n    // Dessiner le graphique en utilisant Chart.js\n    var chart = new Chart('canvas', {\n      type: 'line',\n      data: {\n        labels: sprintLabels,\n        datasets: [{\n          label: 'DONE',\n          data: doneData,\n          borderColor: 'red',\n          type: 'line',\n          borderColor: 'green',\n          fill: false\n        }, {\n          label: 'TODO',\n          data: todoData,\n          borderColor: 'red',\n          fill: false\n        }, {\n          label: 'SCOPE',\n          data: scopeData,\n          borderColor: 'gray',\n          fill: false\n        }]\n      },\n      options: {\n        responsive: true,\n        title: {\n          display: true,\n          text: 'Burn Up Chart'\n        },\n        scales: {\n          xAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Sprints'\n            }\n          }],\n          yAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Effort'\n            }\n          }]\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n          callbacks: {\n            title: function (tooltipItem, data) {\n              return data.labels[tooltipItem[0].index];\n            },\n            label: function (tooltipItem, data) {\n              var datasetLabel = data.datasets[tooltipItem.datasetIndex].label;\n              var value = tooltipItem.yLabel;\n              return $;\n              {\n                datasetLabel;\n              }\n              $;\n              {\n                value;\n              }\n              ;\n            }\n          }\n        }\n      }\n    });\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"burn-up-chart\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    }\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}